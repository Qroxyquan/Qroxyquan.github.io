<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[frp内网穿透实现远程]]></title>
    <url>%2F2020%2F01%2F21%2Ffrps%2F</url>
    <content type="text"><![CDATA[要内网穿透嫌麻烦可以直接用诸如“花生壳“、”natapp“等免费产品，用别人的东西先不说速度如何，总有“寄人篱下”的感觉，所以最好是能自己动手实现，前提是的有一台拥有公网ip的服务器。主流的内网穿透工具有以下两种，两个同样开源，同样用golang编写，市面上大多数内网穿透产品都是基于这两个开发的： ngrok首先排除ngrok，原因： 安装麻烦费时 有断连的bug 速度实测不如frp frp使用frp的原因： 安装十分简单省心 作者提供编译好了二进制文件（不用配置环境） 功能令人满意，稳定运行 一、frp简介frp是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面…）。目前市面上提供类似服务的有花生壳、TeamView、向日葵等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。而frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。 二、frp服务端安装 从项目地址上下载系统对应的releases最新程序 配置服务端 绑定frp服务端运行端口和设置frp 的状态以及代理统计信息展示 运行服务端frp // 解压frp安装包 tar -zxvf frp_0.29.1_linux_amd64.tar.gz // 进入解压包 cd frp_0.29.1_linux_amd64/ // 启动frp服务 ./frps -c frps.ini AdminUI界面 三、frp客户端安装 同样从项目地址中下载客户端系统对应的版本 配置客户端 运行客户端frp ./frpc -c ./frpc.ini 四、注册windows服务端自启frp 在windows下使用nssm 将frp注册为服务.使其开机自启动&amp;后台运行. 下载nssm 解压nssm到frp根目录。 以管理员身份运行cmd。 输入 cd D:\frp_0.18.0_windows_amd64 回车运行 nssm install frpc 点击path选择frp相关目录，输入相关参数。点击Install service 即可 安装为服务.如有安全软件阻挡,允许即可。在服务管理中查找frpc服务并启动。 接着可以在服务看到frp已经注册到windows服务中 远程开启使用 stcp(secret tcp)安全暴露内网，要访问这个服务的机器上启动另外一个 frpc。 // frpc.ini [common] server_addr = x.x.x.x server_port = 7000 [secret_ssh_visitor] type = stcp // stcp 的访问者 role = visitor // 要访问的 stcp 代理的名字 server_name = secret_ssh sk = abcdefg // 绑定本地端口用于访问 ssh 服务 bind_addr = 127.0.0.1 bind_port = 6000 五、非服务器Windows系统开启多用户远程首先先确定windows版本，被远程连接这是一个高级功能,起码要专业版以上(专业版,企业版,服务器版)才行。且windows默认情况下只能同时登录一个账号,并且手机连上电脑,电脑就会退出登录,被踢下线,这是因为,能让多个账号远程连接到一个电脑,这个是服务器版才该有的功能。想要达到能多人远程桌面的需求，需要进行配置，分为两步： 配置本地组策略组策略编辑器,打开后,依次点击:管理模板-Windows组件-远程桌面服务-远程桌面会话主机-连接 双击右边的限制连接的数量,选择已启用,然后在下面选择你想开启的最大连接数,一般填个3都够用了. 双击右边的将远程桌面服务用户限制到单独的远程桌面服务会话,这里很多的教程会建议改成已禁用,但是我的建议是把这里改成已启用!!! 开启多用户连接功能虽然设置了最大连用户数,但是我们的系统本质上装的并不是服务器版本,所以到目前为止我们还是不能够多用户同时连接的,要去github上下载RDPWrap这个软件(不要去csdn等地方下载来路不明的文件,直接去github原作者那下载是最好的). 解压之后我们右键选择用管理员依次运行这三个文件： install.bat update.bat RDPConf.exe 如果你的系统版本太新,那你很可能箭头这里依然会显示[not supported] 如果你的系统非常新,或者更换了rdpwrap.ini文件仍然不支持,就需要到这个代码仓库的issues里面搜索你的系统版本(也就是上面的10.0.17763.771字眼),一般来说都会有人贴出新系统的配置信息,你只要把这个配置信息粘贴到刚刚那个rdpurap.ini文件的末尾就行了.例如下图:到这里,所有的步骤就都结束了，现在可以让两个账户同时连接而不掉线了！且通过frp映射本地的3389端口到指定服务器上TCP端口上，以ip:端口的形式作为远程host连接。]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>远程</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[md技巧-配置自己的图床（两种方式）]]></title>
    <url>%2F2019%2F08%2F26%2Fmd-picpool%2F</url>
    <content type="text"><![CDATA[Markdown是一种轻量级标记语言，可以通过简单的标记使文本具有雅观的格式，让你更加专心与写作。如果说有点让人分心的缺点的话那就是图片上传到图床这个过程了，一般的处理是上传到某个平台，但是可能出现被平台限制出现图片不可用的尴尬。为了避免这种情况出现，我们可以自制图床。 PicGoPicGo是一款简单易用的图床上传工具，配合对应的图床，能够提高写文体验。使用electron开发，意味着全平台： win mac linux 一、阿里对象存储OSS +PicGo进入这里购买套餐。 然后新建Bucket创建成功后，获取到accessKeyId和accessKeySecret 使用PicGo配置OSS： java自定义开发实例：引入SDk &lt;dependency> &lt;groupId>com.baomidou&lt;/groupId> &lt;artifactId>mybatis-plus-boot-starter&lt;/artifactId> &lt;version>${mybatis-plus-boot-starter.version}&lt;/version> &lt;/dependency> OSS工具类package com.lingzhenquan.demo.Qroxy.utils; import com.aliyun.oss.OSSClient; import com.aliyun.oss.model.OSSObject; import com.aliyun.oss.model.ObjectMetadata; import com.aliyun.oss.model.PutObjectResult; import lombok.extern.slf4j.Slf4j; import org.springframework.web.multipart.MultipartFile; import java.io.ByteArrayInputStream; import java.io.File; import java.io.IOException; /** * @desc： * @author: lingzhenquan * @时间: 2019-08-22-13:10 */ @Slf4j public class AliyunOSSClientUtil { public static final String ENDPOINT = "http://oss-cn-shenzhen.aliyuncs.com/"; public static final String ACCESS_KEY_ID = ""; public static final String ACCESS_KEY_SECRET = ""; public static final String FILE_PATH="img/"; /** * 获取阿里云OSS客户端对象 * @return ossClient */ public static OSSClient getOSSClient(){ return new OSSClient(ENDPOINT,ACCESS_KEY_ID, ACCESS_KEY_SECRET); } /** *@desc:上传图片到OSS * *@author:lingzhenquan * *@date:2019-08-22 13:18 * *@param: * *@type: * */ public static String uploadObject2OSS( MultipartFile file, String bucketName, String folder){ String fileName=file.getOriginalFilename(); String ret; ObjectMetadata metadata=new ObjectMetadata(); OSSClient ossClient=null; try { metadata.setContentLength(file.getInputStream().available()); metadata.setCacheControl("no-cache"); metadata.setContentType(getContentType(fileName)); metadata.setHeader("Pragma", "no-cache"); metadata.setContentEncoding("utf-8"); metadata.setContentDisposition("filename/filesize=" + fileName + "/" + file.getSize() + "Byte."); ossClient=AliyunOSSClientUtil.getOSSClient(); PutObjectResult putObjectResult= ossClient.putObject(bucketName,folder+fileName,file.getInputStream(),metadata); ret= putObjectResult.getETag(); } catch (IOException e) { log.error("上传失败："+e); ossClient.shutdown(); return "上传失败"; } ossClient.shutdown(); return ret; } /** *@desc: 生成文件夹 * *@author:lingzhenquan * *@date:2019-08-22 14:12 * *@param:[folder, bucketName] * *@type:java.lang.String * */ public static String createFileFolder(String folder,String bucketName){ final String createFolder=folder; OSSClient ossClient=AliyunOSSClientUtil.getOSSClient(); if (!ossClient.doesObjectExist(bucketName,createFolder)){ ossClient.putObject(bucketName,folder,new ByteArrayInputStream(new byte[0])); log.info("创建文件夹成功"); OSSObject ossObject=ossClient.getObject(bucketName,createFolder); return ossObject.getKey(); } return "文件已存在！"; } /** * 通过文件名判断并获取OSS服务文件上传时文件的contentType * @param fileName 文件名 * @return 文件的contentType */ public static String getContentType(String fileName) { //文件的后缀名 String fileExtension = fileName.substring(fileName.lastIndexOf(".")); if (".bmp".equalsIgnoreCase(fileExtension)) { return "image/bmp"; } if (".gif".equalsIgnoreCase(fileExtension)) { return "image/gif"; } if (".jpeg".equalsIgnoreCase(fileExtension) || ".jpg".equalsIgnoreCase(fileExtension) || ".png".equalsIgnoreCase(fileExtension)) { return "image/jpeg"; } if (".html".equalsIgnoreCase(fileExtension)) { return "text/html"; } if (".txt".equalsIgnoreCase(fileExtension)) { return "text/plain"; } if (".vsd".equalsIgnoreCase(fileExtension)) { return "application/vnd.visio"; } if (".ppt".equalsIgnoreCase(fileExtension) || "pptx".equalsIgnoreCase(fileExtension)) { return "application/vnd.ms-powerpoint"; } if (".doc".equalsIgnoreCase(fileExtension) || "docx".equalsIgnoreCase(fileExtension)) { return "application/msword"; } if (".xml".equalsIgnoreCase(fileExtension)) { return "text/xml"; } //默认返回类型 return "image/jpeg"; } } 二、github +PicGo也可以使用github做图床。 新建一个Repository用于存需要上传的图片。这个仓库最好是public。 生产授权token在Github的Developer setting界面生一个token。记得保存，因为它只会显示一次。 配置PicGo 三、如何使用PicGo有两种方式： 通过屏幕截图截取图片之后，图片会出现在PicGo的待上传列表里面。但是手动点击一下触发上传。成功后链接在粘贴板。 通过面板上传图片我们需要将需要使用的图片拖到PicGo的客户端/或点击上传/或点击粘贴板上传手动上传，上传成功之后，会自动复制成markdown文本，可以直接粘贴使用。]]></content>
      <categories>
        <category>markdown</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>markdown</tag>
        <tag>md</tag>
        <tag>阿里云</tag>
        <tag>阿里云OSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Springboot]]></title>
    <url>%2F2019%2F08%2F20%2Fhow-to-use-springboot%2F</url>
    <content type="text"><![CDATA[一、使用 Spring Boot本章节将详细介绍如何使用 Spring Boot。它覆盖了诸如构建系统、自动配置和如何运行应用等主题。我们还介绍一些 Spring Boot 最佳实践。虽然 Spring Boot 并没有什么特别（它只是另一个您可以使用的类库），但仍然有一些建议可以让您的开发工作变得更加容易。 如果您是刚开始使用 Spring Boot，那么在深入本部分之前，您应该先阅读入门部分。 13、构建系统强烈推荐您选择一个支持依赖管理的构建系统, 您可以使用它将 artifact 发布到 Maven Central 仓库。我们建议您选择 Maven 或者 Gradle。虽然可以让 Spring Boot 与其它构建系统（如 Ant）配合工作，但它们不会得到特别好的支持。 13.1、依赖管理每一次 Spring Boot 发行都提供了一个它所支持的依赖清单。实际上，您不需要为构建配置提供任何依赖的版本，因为 Spring Boot 已经帮您管理这些了。当您升级 Spring Boot 时，这些依赖也将以一致的方式进行升级。 注意 如果您觉得有必要，您仍然可以指定一个版本并覆盖 Spring Boot 所推荐的。 该清单包含了全部可以与 Spring Boot 一起使用的 spring 模块以及第三方类库，可作为标准材料清单（spring-boot-dependencies），并且可以与 Maven 和 Gradle 一起使用。 警告 Spring Boot 的每一次发行都会基于一个 Spring Framework 版本，因此我们强烈建议您不要指定指定它的版本。 13.2、MavenMaven 用户可以继承 spring-boot-starter-parent 项目以获取合适的默认值，父项目提供了以下功能： Java 1.8 作为默认编译器级别。 源代码使用 UTF-8 编码。 依赖管理部分继承自 spring-boot-dependencies 的 POM，允许您省略常见依赖的 &lt;version&gt; 标签。 合理的资源过滤。 合适的插件配置（exec plugin、Git commit ID、shade）。 针对 application.properties 和 application.yml 资源的合理过滤，包括特定 profile 的文件（例如 application-foo.properties 和 application-foo.yml） 注意：由于 application.properties 和 application.yml 文件接受 Spring 风格的占位符（${​...}），因此 Maven 过滤改为使用 @..@ 占位符（您可以使用 Maven 的 resource.delimiter 属性重写它） 13.2.1、继承 Starter Parent要将项目配置继承 spring-boot-starter-parent，只需要按以下方式设置 parent： &lt;!-- 从 Spring Boot 继承默认配置 --> &lt;parent> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-parent&lt;/artifactId> &lt;version>2.0.0.RELEASE&lt;/version> &lt;/parent> 注意 您只需要在此依赖上指定 Spring Boot 的版本号。如果您要导入其它 starter，则可以放心地省略版本号。 通过该设置，您还可以重写自己项目中的配置属性来覆盖个别依赖。例如，要升级到另一个 Spring Data 发行版本，您需要将以下内容添加到 pom.xml 文件中。 &lt;properties> &lt;spring-data-releasetrain.version>Fowler-SR2&lt;/spring-data-releasetrain.version> &lt;/properties> 提示 查看 spring-boot-dependencies pom 以获取受支持的属性清单。 13.2.2、不使用父 POM不是每个人都喜欢从 spring-boot-starter-parent 继承 POM。您可能需要使用自己公司标准的父 POM，或者您可能只是希望明确地声明所有 Maven 配置。 如果您不想使用 spring-boot-starter-parent，则仍然可以通过使用 scope=import 依赖来获得依赖管理（但不是插件管理）的好处： &lt;dependencyManagement> &lt;dependencies> &lt;dependency> &lt;!-- 从 Spring Boot 导入依赖管理 --> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-dependencies&lt;/artifactId> &lt;version>2.0.0.RELEASE&lt;/version> &lt;type>pom&lt;/type> &lt;scope>import&lt;/scope> &lt;/dependency> &lt;/dependencies> &lt;/dependencyManagement> 如上所述，上述示例设置不会让您使用属性来覆盖个别依赖。要达到相同的目的，需要在 spring-boot-dependencies 项之前在项目的 dependencyManagement 中添加一项。例如，要升级到另一个 Spring Data 发行版，您可以将以下元素添加到 pom.xml中： &lt;dependencyManagement> &lt;dependencies> &lt;!-- 覆盖 Spring Boot 提供的 Spring Data --> &lt;dependency> &lt;groupId>org.springframework.data&lt;/groupId> &lt;artifactId>spring-data-releasetrain&lt;/artifactId> &lt;version>Fowler-SR2&lt;/version> &lt;type>pom&lt;/type> &lt;scope>import&lt;/scope> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-dependencies&lt;/artifactId> &lt;version>2.0.0.RELEASE&lt;/version> &lt;type>pom&lt;/type> &lt;scope>import&lt;/scope> &lt;/dependency> &lt;/dependencies> &lt;/dependencyManagement> 注意 以上示例中，我们指定了一个 BOM，但是任何的依赖类型都可以用这个方法来重写。 13.2.3、使用 Spring Boot Maven 插件Spring Boot 包括了一个 Maven 插件，它可以将项目打包成一个可执行 jar。如果要使用它，请将插件添加到您的 &lt;plugins&gt; 中： &lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId> &lt;/plugin> &lt;/plugins> &lt;/build> 注意 如果您使用了 Spring Boot starter 的父 pom，则只需要添加插件。除非您要修改父级中定义的设置，否则不需要进行配置。 13.3、Gradle要了解如何使用 Spring Boot 和 Gradle，请参阅 Spring Boot 的 Gradle 插件文档： 参考文档（HTML 与 PDF） API 13.4、Ant可以使用 Apache Ant+Ivy 构建 Spring Boot 项目。spring-boot-antlib AntLib 模块也可以帮助 Ant 创建可执行 jar 文件。 要声明依赖，可参考以下一个典型的 ivy.xml 文件内容： &lt;ivy-module version="2.0"> &lt;info organisation="org.springframework.boot" module="spring-boot-sample-ant" /> &lt;configurations> &lt;conf name="compile" description="everything needed to compile this module" /> &lt;conf name="runtime" extends="compile" description="everything needed to run this module" /> &lt;/configurations> &lt;dependencies> &lt;dependency org="org.springframework.boot" name="spring-boot-starter" rev="${spring-boot.version}" conf="compile" /> &lt;/dependencies> &lt;/ivy-module> 一个典型的 build.xml 大概是这样： &lt;project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:spring-boot="antlib:org.springframework.boot.ant" name="myapp" default="build"> &lt;property name="spring-boot.version" value="2.0.0.RELEASE" /> &lt;target name="resolve" description="--> retrieve dependencies with ivy"> &lt;ivy:retrieve pattern="lib/[conf]/[artifact]-[type]-[revision].[ext]" /> &lt;/target> &lt;target name="classpaths" depends="resolve"> &lt;path id="compile.classpath"> &lt;fileset dir="lib/compile" includes="*.jar" /> &lt;/path> &lt;/target> &lt;target name="init" depends="classpaths"> &lt;mkdir dir="build/classes" /> &lt;/target> &lt;target name="compile" depends="init" description="compile"> &lt;javac srcdir="src/main/java" destdir="build/classes" classpathref="compile.classpath" /> &lt;/target> &lt;target name="build" depends="compile"> &lt;spring-boot:exejar destfile="build/myapp.jar" classes="build/classes"> &lt;spring-boot:lib> &lt;fileset dir="lib/runtime" /> &lt;/spring-boot:lib> &lt;/spring-boot:exejar> &lt;/target> &lt;/project> 提示 如果您不想使用 spring-boot-antlib 模块，请参阅第 84.10 节：使用 Ant 构建可执行归档文件，无需使用 spring-boot-antlib。 13.5、StarterStarter 是一组惯例依赖描述资源，可以包含在应用中。从 starter 中，您可以获得所需的所有 Spring 和相关技术的一站式支持，无须通过示例代码和复制粘贴来获取依赖。比如，如果您要使用 Spring 和 JPA 进行数据库访问，那么只需要在项目中包含 spring-boot-starter-data-jpa 依赖项即可。 starter 包含了许多您需要用于使项目快速启动和运行，并且需要一组受支持的可传递依赖关系的依赖。 命名含义 官方的所有 starter 都遵循类似的命名规则：spring-boot-starter-*，其中 * 是特定类型的应用。这个命名结构旨在帮助您找到 starter。许多 IDE 中 Maven 集成允许您按名称搜索依赖。例如，安装了 Eclipse 或者 STS 插件后，您可以简单地在 POM 编辑器中按下 ctrl-space 并输入 spring-boot-starter 来获取完整的列表。 正如创建自己的 starter 章节所述，第三方的 starter 命名不应该以 spring-boot 开头，因为它是官方 Spring Boot 构件所保留的规则。例如，有一个第三方 starter 项目叫做 thirdpartyproject，它通常会命名为 thirdpartyproject-spring-boot-starter。 Spring Boot 在 org.springframework.boot group 下提供了以下应用 starter： 表 13.1、Spring Boot 应用类 Starter 名称 描述 POM spring-boot-starter 核心 starter，包含自动配置支持、日志和 YAML Pom spring-boot-starter-activemq 提供 JMS 消息支持，使用 Apache ActiveMQ Pom spring-boot-starter-amqp 提供 Spring AMQP 与 Rabbit MQ 支持 Pom spring-boot-starter-aop 提供 Spring AOP 与 AspectJ 面向切面编程支持 Pom spring-boot-starter-artemis 提供 JMS 消息服务支持，使用 Apache Artemis Pom spring-boot-starter-batch 提供 Spring Batch 支持 Pom spring-boot-starter-cache 提供 Spring Framework 缓存支持 Pom spring-boot-starter-cloud-connectors 使用 Spring Cloud Connectors 简单连接到类似 Cloud Foundry 和 Heroku 等云平台 Pom spring-boot-starter-data-cassandra 提供对 Cassandra 分布式数据库和 Spring Data Cassandra 的支持 Pom spring-boot-starter-data-cassandra-reactive 提供对 Cassandra 分布式数据库和 Spring Data Cassandra Reactive 的支持 Pom spring-boot-starter-data-couchbase 提供对 Couchbase 面向文档数据库和 Spring Data Couchbase 的支持 Pom spring-boot-starter-data-couchbase-reactive 提供对 Couchbase 面向文档数据库和 Spring Data Couchbase Reactive 的支持 Pom spring-boot-starter-data-elasticsearch 提供对 Elasticseach 搜索与分析引擎和 Spring Data Elasticsearch 的支持 Pom spring-boot-starter-data-jpa 提供 Spring Data JPA 与 Hibernate 的支持 Pom spring-boot-starter-data-ldap 提供对 Spring Data LDAP 的支持 Pom spring-boot-starter-data-mongodb 提供对 MongoDB 面向文档数据库和 Spring Data MongoDB 的支持 Pom spring-boot-starter-data-mongodb-reactive 提供对 MongoDB 面向文档数据库和 Spring Data MongoDB Reactive 的支持 Pom spring-boot-starter-data-neo4j 提供对 Neo4j 图数据库与 SPring Data Neo4j 的支持 Pom spring-boot-starter-data-redis 提供对 Redis 键值数据存储、Spring Data Redis 和 Lettuce 客户端的支持 Pom spring-boot-starter-data-redis-reactive 提供对 Redis 键值数据存储、Spring Data Redis Reactive 和 Lettuce 客户端的支持 Pom spring-boot-starter-data-rest 提供使用 Spring Data REST 通过 REST 暴露 Spring Data 资源库的支持 Pom spring-boot-starter-data-solr 提供对 Apache Solr 搜索平台与 Spring Data Solr 的支持 Pom spring-boot-starter-freemarker 提供使用 Freemakrer 视图构建 MVC web 应用的支持 Pom spring-boot-starter-groovy-templates 提供使用 Groovy 模板视图构建 MVC web 应用的支持 Pom spring-boot-starter-hateoas 提供使用 Spring MVC 与Spring HATEOAS 构建基于超媒体的 RESTful web 应用的支持 Pom spring-boot-starter-integration 提供对 Spring Integration 的支持 Pom spring-boot-starter-jdbc 提供 JDBC 与 Tomcat JDBC 连接池的支持 Pom spring-boot-starter-jersey 提供对使用 JAX-RS 与 Jersey 构建 RESTful web 应用的支持。spring-boot-starter-web 的替代方案 Pom spring-boot-starter-jooq 提供对使用 JOOQ 访问 SQL 数据库的支持。spring-boot-starter-data-jpa 或 spring-boot-starter-jdbc 的替代方案 Pom spring-boot-starter-json 提供了读写 json 的支持 Pom spring-boot-starter-jta-atomikos 提供 Atomikos JTA 事务支持 Pom spring-boot-starter-jta-bitronix 提供 Bitronix JTA 事务支持 Pom spring-boot-starter-jta-narayana 提供 Narayana JTA 支持 Pom spring-boot-starter-mail 提供使用 Java Mail 与 Spring Framework 的邮件发送支持 Pom spring-boot-starter-mustache 提供使用 Mustache 视图构建 web 应用的支持 Pom spring-boot-starter-quartz Quartz 支持 Pom spring-boot-starter-security Spring Security 支持 Pom spring-boot-starter-test 提供包含了 JUnit、Hamcrest 与 Mockito 类库的 Spring Boot 单元测试支持 Pom spring-boot-starter-thymeleaf 提供使用 Thymeleaf 视图构建 MVC web 应用的支持 pom spring-boot-starter-validation 提供 Hibernate Validator 与 Java Bean Validation 的支持 Pom spring-boot-starter-web 提供使用 Spring MVC 构建 web（包含 RESTful）应用的支持，使用 Tomcat 作为默认嵌入式容器 Pom spring-boot-starter-web-services Spring Web Services 支持 Pom spring-boot-starter-webflux 提供使用 Spring Framework 的 Reactive Web 支持构建 WebFlux 应用的支持 Pom spring-boot-starter-websocket 提供使用 Spring Framework 的 WebSocket 支持构建 WebSocket 应用的支持 Pom 除了应用 starter，以下 starter 可用于添加生产就绪特性： 表 13.2、Spring Boot 生产类 starter 名称 描述 POM spring-boot-starter-actuator Spring Boot 的 Actuator 支持，其提供了生产就绪功能，帮助您监控和管理应用 Pom 最后，Spring Boot 还包含以下 starter，如果您想要排除或切换特定技术，可以使用以下 starter： 表 13.3、Spring Boot 技术类 starter 名称 描述 POM spring-boot-starter-jetty 使用 Jetty 作为嵌入式 servlet 容器。可代替 spring-boot-starter-tomcat Pom spring-boot-starter-log4j2 使用 Log4j2 作为日志组件。可代替 spring-boot-starter-logging Pom spring-boot-starter-logging 使用 Logback 作为日志组件，此 starter 为默认的日志 starter Pom spring-boot-starter-reactor-netty 使用 Reactor Netty 作为内嵌响应式 HTTP 服务器 Pom spring-boot-starter-tomcat 使用 Tomcat 作为嵌入式 servlet 容器，此为 spring-boot-starter-web 默认的 servlet 容器 starter Pom spring-boot-starter-undertow 使用 Undertow 作为嵌入式 servlet 容器，可代替 spring-boot-starter-tomcat Pom 提示 有关其它社区贡献的 starter 列表，请参阅 GitHub 上的 spring-boot-starters 模块中的 README 文件。 14、组织代码Spring Boot 不需要任何特定的代码布局，但是有一些最佳实践是很有用的。 14.1、使用 default 包当一个类没有 package 声明时，它就被认为是在 default 包中。通常不鼓励使用 default 包，应该避免使用。对于使用 @ComponentScan、@EntityScan 或者 @SpringBootApplication 注解的 Spring Boot 应用，这样可能会导致特殊问题发生，因为每一个 jar 中的每一个类将会被读取到。 提示 我们建议您使用 Java 推荐的包命名约定，并使用域名的反向形式命名（例如 com.example.project）。 14.2、定位主应用类我们通常建议您将主应用类放在其它类之上的根包中， @EnableAutoConfiguration 注解通常放在主类上，它隐式定义了某些项目的 包搜索的基准起点。例如，如果您在编写一个 JPA 应用程序，则被 @EnableAutoConfiguration 注解的类所属的包将被用于搜索标记有 @Entity 注解的类。 使用根包还可以允许使用没有指定 basePackage 属性的 @ComponentScan 注解。如果您的主类在根包中，也可以使用 @SpringBootApplication 注解。 以下是一个经典的包结构： com +- example +- myapplication +- Application.java | +- customer | +- Customer.java | +- CustomerController.java | +- CustomerService.java | +- CustomerRepository.java | +- order +- Order.java +- OrderController.java +- OrderService.java +- OrderRepository.java Application.java 文件声明了 main 方法，附带了 @Configuration 注解。 package com.example.myapplication; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 15、配置类Spring Boot 支持基于 Java 的配置。虽然可以在 SpringApplication 中使用 XML 配置源，但我们通常建议主配置源为 @Configuration 类。通常，一个很好的选择是将定义了 main 方法的类作为 @Configuration。 提示 许多 Spring 的 XML 配置示例已经在 Internet 上发布了。如果可能的话，您无论如何都应该尝试着使用等效的基于 Java 的配置方式，搜索 Enable* 注解可以帮到您不少忙。 15.1、导入额外的配置类你不需要把所有的 @Configuration 放在一个类中。@Import 注解可用于导入其他配置类。或者，您可以使用 @ComponentScan 自动扫描所有 Spring 组件，包括 @Configuration 类。 15.2、导入 XML 配置如果您一定要使用基于 XML 的配置，我们建议您仍然使用 @Configuration 类。您可以使用 @ImportResource 注解来加载 XML 配置文件。 16、自动配置Spring Boot 自动配置尝试根据您添加的 jar 依赖自动配置 Spring 应用。例如，如果 classpath 下存在 HSQLDB，并且您没有手动配置任何数据库连接 bean，那么 Spring Boot 将自动配置一个内存数据库。 您需要通过将 @EnableAutoConfiguration 或者 @SpringBootApplication 注解添加到其中一个 @Configuration 类之上以启用自动配置。 提示 您应该仅添加一个 @EnableAutoConfiguration 注解。我们通常建议您将其添加到主 @Configuration 类中。 16.1、平滑替换自动配置自动配置是非入侵的，您可以随时定义自己的配置来代替自动配置的特定部分。例如，如果您添加了自己的 DataSource bean，默认的嵌入式数据库支持将不会自动配置。 如果您需要了解当前正在应用的自动配置，以及为什么使用，请使用 --debug 开关启动应用。这样做可以为核心 logger 启用调试日志，并记录到控制台。 16.2、禁用指定的自动配置类如果您发现在正在使用不需要的自动配置类，可以通过使用 @EnableAutoConfiguration 的 exclude 属性来禁用它们。 import org.springframework.boot.autoconfigure.*; import org.springframework.boot.autoconfigure.jdbc.*; import org.springframework.context.annotation.*; @Configuration @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class}) public class MyConfiguration { } 如果类不在 classpath 下，您可以使用注解的 excludeName 属性并指定完全类名。最后，您还可以通过 spring.autoconfigure.exclude property 控制要排除的自动配置类列表。 提示 您可以同时使用注解和 property 定义排除项 17、Spring Bean 与依赖注入您可以自由使用任何标准的 Spring Framework 技术来定义您的 bean 以及它们注入的依赖。我们发现使用 @ComponentScan 来寻找 bean 和结合 @Autowired 构造器注入可以很好地工作。 如果您按照上述的建议（将应用类放在根包中）来组织代码，则可以添加无参的 @ComponentScan。所有应用组件（@Component、@Service、@Repository、@Controller 等）将自动注册为 Spring Bean。 以下是一个 @Service Bean，其使用构造注入方式获取一个必需的 RiskAssessor bean。 package com.example.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class DatabaseAccountService implements AccountService { private final RiskAssessor riskAssessor; @Autowired public DatabaseAccountService(RiskAssessor riskAssessor) { this.riskAssessor = riskAssessor; } // ... } 如果 bean 中只有一个构造方法，您可以忽略掉 @Autowired 注解。 @Service public class DatabaseAccountService implements AccountService { private final RiskAssessor riskAssessor; public DatabaseAccountService(RiskAssessor riskAssessor) { this.riskAssessor = riskAssessor; } // ... } 提示 请注意，构造注入允许 riskAssessor 字段被修饰为 final，这表示以后它不能被更改。 18、使用 @SpringBootApplication 注解很多 Spring Boot 开发者总是使用 @Configuration、@EnableAutoConfiguration 和 @ComponentScan 注解标记在主类上。由于 这些注解经常一起使用（特别是如果您遵循上述的最佳实践）。Spring Boot 提供了一个更方便的 @SpringBootApplication 注解可用来替代这个组合。 @SpringBootApplication 注解相当于使用 @Configuration、@EnableAutoConfiguration 和 @ComponentScan 及他们的默认属性： package com.example.myapplication; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication // 相当于使用 @Configuration @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 注意 @SpringBootApplication 还提供了别名来自定义 @EnableAutoConfiguration 和 @ComponentScan 的属性。 19、运行您的应用将应用程序打包成 jar 可执行文件并使用嵌入式 HTTP 服务器的最大有点之一就是可以按照您想使用的其它方式来运行应用。调试 Spring Boot 也是很简单，您不需要任何特殊的 IDE 插件或者扩展。 注意 本章节仅涵盖基于 jar 的打包方式，如果您选择将应用打包为 war 文件，则应该参考您的服务器和 IDE 文档。 19.1、使用 IDE 运行您可以使用 IDE 运行 Spring Boot应用，就像运行一个简单的 Java 应用程序一样，但是首先您需要导入项目，导入步骤取决于您的 IDE 和构建系统。大多数 IDE 可以直接导入 Maven 项目，例如 Eclipse 用户可以从 File 菜单中选择 Import ​ → Existing Maven Projects。 如果您无法将项目直接导入到 IDE 中，则可以使用构建插件生成 IDE 元数据（metadata）。Maven 包含了 Eclipse 和 IDEA 的插件,Gradle 也为各种 IDE 提供了插件。 提示 如果您不小心运行了两次 web 应用，您将看到一个 Port already in use （端口已经被使用）错误。STS 用户可以使用 Relaunch 按钮运行以确保现有的任何实例都已关闭，而不是使用 Run 按钮。 19.2、作为打包应用运行如果您使用 Spring Boot Maven 或者 Gradle 插件创建可执行 jar，可以使用 java -jar 命令运行应用。例如： $ java -jar target/myapplication-0.0.1-SNAPSHOT.jar 也可以在运行打包应用程序时开启远程调试支持。该功能允许您将调试器附加到打包的应用中。 $ java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n \ -jar target/myapplication-0.0.1-SNAPSHOT.jar 19.3、使用 Maven 插件Spring Boot Maven 插件包含一个可用于快速编译和运行应用程序的 run goal。应用程序以快速形式运行，就像在 IDE 中一样。以下示例展示了运行 Spring Boot 应用程序的典型 Maven 命令： $ mvn spring-boot:run 您可能还想使用 MAVEN_OPTS 操作系统环境变量，如下例所示： $ export MAVEN_OPTS=-Xmx1024m 19.4、使用 Gradle 插件Spring Boot Gradle 插件包含一个 bootRun 任务，可用于以快速形式运行应用程序。每当应用 org.springframework.boot 和 java 插件时都会添加 bootRun 任务： $ gradle bootRun 您可能还想使用 JAVA_OPTS 操作系统环境变量： $ export JAVA_OPTS=-Xmx1024m 19.5、热交换由于 Spring Boot 应用程序只是普通的 Java 应用程序，因此 JVM 热插拔是可以开箱即用。JVM 热插拔在可替换字节码方面有所限制。想要更完整的解决方案，可以使用 JRebel。 spring-boot-devtools 模块包含了对快速重新启动应用程序的支持。有关详细信息，请参阅本章后面的第 20 章：开发人员工具部分以及热插拔的 How-to 部分。 20、开发者工具Spring Boot 包含了一套工具，可以使应用开发体验更加愉快。spring-boot-devtools 模块可包含在任何项目中，以提供额外的开发时（development-time）功能。要启用 devtools 支持，只需要将模块依赖添加到您的构建配置中即可： Maven &lt;dependencies> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-devtools&lt;/artifactId> &lt;optional>true&lt;/optional> &lt;/dependency> &lt;/dependencies> Gradle dependencies { compile("org.springframework.boot:spring-boot-devtools") } 注意 当运行完全打包的应用时，开发者工具将会自动禁用。如果您的应用使用了 java -jar 方式或者特殊的类加载器启动，那么它会被认为是一个生产级别应用。将 Maven 的依赖标记为可选或者在 Gradle 中使用 compileOnly 是防止您的项目被其他模块使用时 devtools 被应用到其它模块的最佳方法。 提示 重新打包的归档默认情况下不包含 devtools。如果要使用某些远程 devtools 功能, 你需要禁用 excludeDevtools 构建属性以把 devtools 包含进来。该属性支持 Maven 和 Gradle 插件。 20.1、Property 默认值Spring Boot 所支持的一些库使用了缓存来提高性能。例如，模板引擎将缓存编译后的模板，以避免重复解析模板文件。此外，Spring MVC 可以在服务静态资源时添加 HTTP 缓存头。 虽然缓存在生产中非常有用，但它在开发过程可能会产生相反的效果，让您不能及时看到刚才在应用中作出的更改。因此，spring-boot-devtools 将默认禁用这些缓存选项。 一般是在 application.properties 文件中设置缓存选项。例如，Thymeleaf 提供了 spring.thymeleaf.cache 属性。您不需要手动设置这些属性，spring-boot-devtools 会自动应用合适的开发时（development-time）配置。 提示 有关应用属性的完整列表，请参阅 DevToolsPropertyDefaultsPostProcessor。 20.2、自动重启使用 spring-boot-devtools 的应用在 classpath 下的文件发生更改时会自动重启。这对于使用 IDE 工作而言可能是一个非常棒的功能，因为它为代码变更提供了非常块的反馈环。默认情况下，将监视 classpath 指向的所有文件夹。请注意，某些资源（如静态资源和视图模板）不需要重启应用。 触发重启 当 DevTools 监视 classpath 资源时，触发重启的唯一方式是更新 classpath。使 classpath 更新的方式取决于您使用的 IDE。在 Eclipse 中，保存修改的文件将更新 classpath，从而触发重启。在 IntelliJ IDEA 中，构建项目（Build -&gt; Make Project) 将产生相同的效果。 注意 只要 forking 被开启，您可以使用受支持的构建工具（如 Maven 或 Gradle）来启用应用，因为 DevTools 需要隔离应用类加载器才能正常运行。默认情况下，当在 classpath 下检测到 DevTools 时，Gradle 和 Maven 会这么做。 提示 自动重启功能与 LiveReload（实时重载）一起使用效果更棒。阅读 LiveReload 章节以获取更多信息。如果您使用 JRebel，自动重启将会被禁用，以支持动态类重载，但其他 devtools 功能（如 LiveReload 和 property 覆盖）仍然可以使用。 注意 DevTools 依赖于应用上下文的关闭钩子，以在重启期间关闭自己。如果禁用了关闭钩子（SpringApplication.setRegisterShutdownHook(false)），它将不能正常工作。 注意 当 classpath 下的内容发生更改，决定是否触发重启时，DevTools 会自动忽略名为 spring-boot、spring-boot-devtools、spring-boot-autoconfigure、spring-boot-actuator 和 spring-boot-starter 的项目。 注意 DevTools 需要自定义 ApplicationContext 使用到的 ResourceLoader。如果您的应用已经提供了一个，它将被包装起来，因为不支持在 ApplicationContext 上直接覆盖 getResource 方法。 重启（Restart）与重载（Reload） Spring Boot 通过使用两个类加载器来提供了重启技术。不改变的类（例如，第三方 jar）被加载到 base 类加载器中。经常处于开发状态的类被加载到 restart 类加载器中。当应用重启时，restart 类加载器将被丢弃，并重新创建一个新的。这种方式意味着应用重启比冷启动要快得多，因为省去 base 类加载器的处理步骤，并且可以直接使用。 如果您觉得重启还不够快，或者遇到类加载问题，您可以考虑如 ZeroTurnaround 的 JRebel 等工具。他们是通过在加载类时重写类来加快重新加载。 20.2.1、条件评估变更日志默认情况下，每次应用重启时，都会记录显示条件评估增量的报告。该报告展示了在您进行更改（如添加或删除 bean 以及设置配置属性）时对应用自动配置所作出的更改。 要禁用报告的日志记录，请设置以下属性： spring.devtools.restart.log-condition-evaluation-delta=false 20.2.2、排除资源某些资源在更改时不一定需要触发重启。例如，Thymeleaf 模板可以实时编辑。默认情况下，更改 /META-INF/maven、/META-INF/resources、/resources、/static、/public 或者 /templates 不会触发重启，但会触发 LiveReload。如果您想自定义排除项，可以使用 spring.devtools.restart.exclude 属性。例如，仅排除 /static 和 /public，您可以设置以下内容： spring.devtools.restart.exclude=static/**,public/** 提示 如果要保留这些默认值并添加其他排除项 ，请改用 spring.devtools.restart.additional-exclude 属性。 20.2.3、监视附加路径如果您想在对不在 classpath 下的文件进行修改时重启或重载应用，请使用 spring.devtools.restart.additional-paths 属性来配置监视其他路径的更改情况。您可以使用上述的 spring.devtools.restart.exclude 属性来控制附加路径下的文件被修改时是否触发重启或只是 LiveReload。 20.2.4、禁用重启您如果不想使用重启功能，可以使用 spring.devtools.restart.enabled 属性来禁用它。一般情况下，您可以在 application.properties 中设置此属性（重启类加载器仍将被初始化，但不会监视文件更改）。 如果您需要完全禁用重启支持（例如，可能它不适用于某些类库），您需要在调用 SpringApplication.run(​...) 之前将 System 属性 spring.devtools.restart.enabled System 设置为 false。例如： public static void main(String[] args) { System.setProperty("spring.devtools.restart.enabled", "false"); SpringApplication.run(MyApp.class, args); } 20.2.5、使用触发文件如果您使用 IDE 进行开发，并且时时刻刻在编译更改的文件，或许您只是希望在特定的时间内触发重启。为此，您可以使用触发文件，这是一个特殊文件，您想要触发重启检查时，必须修改它。更改文件只会触发检查，只有在 Devtools 检查到它需要做某些操作时才会触发重启，可以手动更新触发文件，也可以通过 IDE 插件更新。 要使用触发文件，请设置 spring.devtools.restart.trigger-file 属性指向触发文件的路径。 提示 您也许想将 spring.devtools.restart.trigger-file 设置成一个全局配置，以使得所有的项目都能应用此方式。 20.2.6、自定义重启类加载器正如之前的重启和重载部分所述，重启功能是通过使用两个类加载器来实现的。对于大多数应用而言，这种方式很好，然而，有时可能会导致类加载出现问题。 默认情况下，IDE 中任何打开的项目将使用 restart 类加载器加载，任何常规的 .jar 文件将使用 base 类加载器加载。您如果开发的是多模块项目，而不是每一个模块都导入到 IDE 中，则可能需要自定义。为此，您可以创建一个 META-INF/spring-devtools.properties 文件。 spring-devtools.properties 文件可以包含以 restart.exclude. 和 restart.include. 为前缀的属性。include 元素是加载到 restart 类加载器的项，exclude 元素是加载到 base 类加载器的项。属性值是一个应用到 classpath 的正则表达式。例如： restart.exclude.companycommonlibs=/mycorp-common-[\\w-]+\.jar restart.include.projectcommon=/mycorp-myproj-[\\w-]+\.jar 注意 所有属性键名必须是唯一的。只要有一个属性以 restart.include. 或 restart.exclude. 开头，它将会被考虑。 提示 classpath 下的所有 META-INF/spring-devtools.properties 文件将被加载，您可以将它们打包进工程或者类库中为项目所用。 20.2.7、已知限制重新启动功能对使用标准 ObjectInputStream 反序列化的对象无效。您如果需要反序列化数据，可能需要使用 Spring 的 ConfigurableObjectInputStream 配合 Thread.currentThread().getContextClassLoader()。 遗憾的是，一些第三方类库在没有考虑上下文类加载器的情况下使用了反序列化。您如果遇到此问题，需要向原作者提交修复请求。 20.3、LiveReloadspring-boot-devtools 模块包括了一个内嵌 LiveReload 服务器，它可在资源发生更改时触发浏览器刷新。您可以从 livereload.com 上免费获取 Chrome、Firefox 和 Safari 平台下对应的 LiveReload 浏览器扩展程序。 如果您不想在应用运行时启动 LiveReload 服务器，可以将 spring.devtools.livereload.enabled 属性设置为 false。 注意 您一次只能运行一个 LiveReload 服务器。在启动应用之前，请确保没有其他 LiveReload 服务器正在运行。如果在 IDE 中启动了多个应用，那么只有第一个应用的 LiveReload 生效。 20.4、全局设置您可以通过在 $HOME 目录中添加名为 .spring-boot-devtools.properties 的文件来配置全局 devtools 设置（请注意，文件名以“.”开头）。在此文件中添加的任何属性将应用到您的计算机上所有使用了 devtools 的 Spring Boot 应用。例如，始终使用触发文件来配置重启功能，您可以添加以下内容： ~/.spring-boot-devtools.properties. spring.devtools.reload.trigger-file=.reloadtrigger 注意 在 .spring-boot-devtools.properties 中激活的 profile 将不会影响指定 profile 的配置文件的加载。 20.5、远程应用Spring Boot 开发者工具不局限于本地开发。在远程运行应用时也可以使用许多功能。远程支持功能是可选的，如果要启用，您需要确保在重新打包归档文件时包含 devtools： &lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId> &lt;configuration> &lt;excludeDevtools>false&lt;/excludeDevtools> &lt;/configuration> &lt;/plugin> &lt;/plugins> &lt;/build> 之后您需要设置一个 spring.devtools.remote.secret 属性，如下： spring.devtools.remote.secret=mysecret 警告 在远程应用上启用 spring-boot-devtools 是存在安全隐患的。您不应该在生产部署时启用它。 远程 devtools 支持分为两部分：接受请求连接的服务器端端点和在 IDE 中运行的客户端应用。当设置了 spring.devtools.remote.secret 属性时，服务器组件将自动启用。客户端组件必须手启用。 20.5.1、运行远程客户端应用假设远程客户端应用运行在 IDE 中。您需要在与要连接的远程项目相同的 classpath 下运行 org.springframework.boot.devtools.RemoteSpringApplication。把要连接的远程 URL 作为必须参数传入。 例如，如果您使用的是 Eclipse 或 STS，并且有一个名为 my-app 的项目已部署到了 Cloud Foundry，则可以执行以下操作： 在 Run 菜单中选择选择 Run Configurations...​。 创建一个新的 Java Application launch configuration。 浏览 my-app 项目。 使用 org.springframework.boot.devtools.RemoteSpringApplication 作为主类。 将 https://myapp.cfapps.io 作为 程序参数 （或者任何远程 URL）传入。 运行的远程客户端将如下所示： . ____ _ __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __ __ _ ___ _ \ \ \ \ ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | | _ \___ _ __ ___| |_ ___ \ \ \ \ \\/ ___)| |_)| | | | | || (_| []::::::[] / -_) &#39; \/ _ \ _/ -_) ) ) ) ) &#39; |____| .__|_| |_|_| |_\__, | |_|_\___|_|_|_\___/\__\___|/ / / / =========|_|==============|___/===================================/_/_/_/ :: Spring Boot Remote :: 2.1.1.RELEASE 2015-06-10 18:25:06.632 INFO 14938 --- [ main] o.s.b.devtools.RemoteSpringApplication : Starting RemoteSpringApplication on pwmbp with PID 14938 (/Users/pwebb/projects/spring-boot/code/spring-boot-devtools/target/classes started by pwebb in /Users/pwebb/projects/spring-boot/code/spring-boot-samples/spring-boot-sample-devtools) 2015-06-10 18:25:06.671 INFO 14938 --- [ main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2a17b7b6: startup date [Wed Jun 10 18:25:06 PDT 2015]; root of context hierarchy 2015-06-10 18:25:07.043 WARN 14938 --- [ main] o.s.b.d.r.c.RemoteClientConfiguration : The connection to http://localhost:8080 is insecure. You should use a URL starting with &#39;https://&#39;. 2015-06-10 18:25:07.074 INFO 14938 --- [ main] o.s.b.d.a.OptionalLiveReloadServer : LiveReload server is running on port 35729 2015-06-10 18:25:07.130 INFO 14938 --- [ main] o.s.b.devtools.RemoteSpringApplication : Started RemoteSpringApplication in 0.74 seconds (JVM running for 1.105) 注意 由于远程客户端与实际应用使用的是同一个 classpath，因此可以直接读取应用的 properties。这也是 spring.devtools.remote.secret 属性为什么能被读取和传递给服务器进行身份验证的原因。 提示 建议使用 https:// 作为连接协议，以便加密传输并防止密码被拦截。 提示 如果您需要通过代理来访问远程应用，请配置 spring.devtools.remote.proxy.host 和 spring.devtools.remote.proxy.port 属性。 20.5.2、远程更新远程客户端使用了与本地重启相同的方式来监控应用 classpath 下发生的更改。任何更新的资源将被推送到远程应用和触发重启（如果要求）。如果您正在迭代一个使用了本地没有的云服务的功能，这可能会非常有用。通常远程更新和重启比完全重新构建和部署的周期要快得多。 注意 文件只有在远程客户端运行时才被监控。如果您在启动远程客户端之前更改了文件，文件将不会被推送到远程服务器。 21、打包生产应用可执行 jar 可用于生产部署，它们是独立（self-contained，独立、自包含）的，同样也适合云部署。 针对其他生产就绪功能，比如健康、审计和 REST 或者 JMX 端点度量，可以添加 spring-boot-actuator。有关这方面的详细信息，请参见 第五部分：“Spring Boot Actuator：生产就绪功能”。 22、下一步您现在应该知道如何使用 Spring Boot 以及应该遵循哪些最佳实践。接下来您可以深入地了解 Spring Boot 功能，或者您也可以跳过下一部分直接阅读“生产就绪功能”方面的内容。 转载自oopsguy]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试必备]]></title>
    <url>%2F2019%2F06%2F03%2FJava%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%2F</url>
    <content type="text"><![CDATA[请输入访问密码！ Decrypt ]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JAVA对象的序列化与反序列化的学习与理解]]></title>
    <url>%2F2018%2F11%2F03%2F%E5%85%B3%E4%BA%8EJAVA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[关于JAVA对象的序列化与反序列化的学习与理解一、什么是序列化序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。 简单来说，序列化就是一种将对象转成字节方便传送到别处或存储在硬盘上，并且再从转化成的字节重构对象的机制。 二、如何序列化将需要被序列化的类实现Serializable接口，该接口没有需要实现的法， implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如:FileOutputStream)来构造一个ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Objectobj)方法就可以为obj的对象写出(即保存其状态)，要恢复的话则用输入流。 三、简单的实现先写一个Person类实现Serializable接口 import java.io.Serializable; /** * @desc：实现Serializable接口 * @author: Qroxy * @QQ：1114031075 * @时间: 2018/11/3-12:29 PM */ public class Person implements Serializable { private String name; private int age; private String sex; public Person(String name, int age, String sex) { this.name = name; this.age = age; this.sex = sex; } @Override public String toString() { return "Person{" + "name='" + name + '\'' + ", age=" + age + ", sex='" + sex + '\'' + '}'; } } 四、进行序列化与反序列化现在创建一个存储流的文件（test.txt) import java.io.*; /** * @desc：序列化与反序列化 * @author: Qroxy * @QQ：1114031075 * @时间: 2018/11/3-12:29 PM */ public class Serializable { private static void SerializePerson() throws FileNotFoundException, IOException { Person person = new Person("镇权", 22, "男"); ObjectOutputStream oo = new ObjectOutputStream(new FileOutputStream("/Users/chun/我的项目/测试/test.txt")); oo.writeObject(person); System.out.println("Person对象序列化成功！"); oo.close(); } //记得对错误抛出处理，以便出现错误快速定位 private static Person DeserializePerson() throws FileNotFoundException, IOException { ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("/Users/chun/我的项目/测试/test.txt")); Person person = null; try { person = (Person) objectInputStream.readObject(); System.out.println("Person对象反序列化成功！"); } catch (ClassNotFoundException e) { new RuntimeException(e); } return person; } //写个主函数运行看一下效果 public static void main(String[] args) throws Exception { SerializePerson(); Person person = DeserializePerson(); System.out.println(person); } } 运行结果： 再打开test.txt文件可以看到一堆16进制编码： 以上就就是序列化与反序列化的实现。值得注意的是，如果报以下错误即对象没有继承Serializable接口。 当不想某个成员变量被序列化的话可以加transient关键字，当反序列化时该值就会为null。 五、Java IO知识的巩固学习自身对java IO知识的掌握比较薄弱，这几天着重学习一下，并尽量做下笔记以加深印象。 1.关于java几种类型的流：按照流的方向:输入流(inputStream)和输出流(outputStream)。 按照实现功能分:节点流(可以从或向一个特定的地方(节点)读写数据。 如 FileReader)和处理流(是对一个 已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如 BufferedReader。处理流的构造方法总是要 带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。) 按照处理数据的单位:字节流和字符流。字节流继承于 InputStream 和 OutputStream，字符流继承于 InputStreamReader 和 OutputStreamWriter。 2. 字节流如何转为字符流（两者的区别）字节输入流转字符输入流通过InputStreamReader实现，该类的构造函数可以传入 InputStream 对象。 字节输出流转字符输出流通过OutputStreamWriter实现，该类的构造函数可以传入 OutputStream 对象。 3.关于流的序列化与反序列化如上！]]></content>
  </entry>
  <entry>
    <title><![CDATA[对接支付宝支付接口开发笔记]]></title>
    <url>%2F2018%2F10%2F17%2F%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[支付宝对接学习笔记： 功能介绍： 支付宝对接 支付宝回调 查询支付状态（略过不讲） 要求： 熟悉支付宝对接核心文档，调通支付宝官方Demo 解析支付宝SDK对接源码 RSA1和RSA2验证签名及加解密 避免支付宝的重复通知而加数据校验（略） 技巧： ngrok 外网穿透 生成二维码并持久化到图片服务器 调试完demo后，集合到开发项目。把支付宝依赖的jar宝按照提供版本要求导入，sdk则放在web下lib文件夹下。然后在module的依赖中导入lib下的本地jar包（坑！！不然会报红）那么为什么不统一使用pom导入呢？原因就是阿里没有提供该jar包的线上导入，只能本地导入。为了统一jar地址，所以必须先配置sdk的jar包的位置。（在这之前还要配置一个maven插件以加载本地jar包）. 接下来简单梳理一遍流程：一、登录进入蚂蚁金服 本次使用沙箱环境下进行整合，沙箱环境开发上线流程差别不大，和正式几乎是一致的，只是切换不同的APPID和支付宝网关。 二、下载官方的demo这里选中java版的demo 选中idea导入。先在本地调通再集成到系统中去。 右键运行主函数会发现运行不了，那是因为我们还没有修改配置文件中设置。 对应配置如下。 那么问题来了怎么生成这些公钥私钥呢？前往这里根据系统下载对应的工具。 接着：配置好配置文件后，运行一下：运行没有问题，证明已经调通。下载沙箱版的支付宝，登录沙箱提供的买家账户，复制当面付二维码找一个二维码生成工具扫描支付看能不能成功。 扫描支付后：到此为止本地支付宝已经调通，这个还是相对来说比较简单的。从demo的项目结构来看，这是一个web项目，可以自行配置运行环境再运行，测试会更加方便一点，如果没有出错的话就会出现下图： 三、系统对接支付宝支付接口虽然官网已经写得很清楚了，但是第一次对接还是很吃力，这里写一下思路： 1、先把demo中的aplipay那个包及配置文件复制放到需要集成项目的类路径下： 2、把支付宝依赖的jar宝按照提供版本要求导入，sdk则放在web下lib文件夹下。然后在module的依赖中导入lib下的本地jar包（坑！！不然会报红）那么为什么不统一使用pom导入呢？原因就是阿里没有提供该jar包的线上导入，只能本地导入。为了统一jar地址，所以必须先配置sdk的jar包的位置。还要配置一个maven插件以加载本地jar包. 3、运行下主函数没有报错就是初步导入成功。 四、对接支付宝支付接口1、这里是整个过程中最难的部分。从下订单到支付到支付完成，省去下订单的接口，支付过程需要用到两个接口，一个是支付接口，一个是给支付宝授权回调接口。订单这里采用模拟数据。 2、首先支付接口扫码支付调用流程： 官方文档参数描述：因此先查询数据组装支付宝要求的参数值： Map&lt;String, String> resultMap = Maps.newHashMap(); Order order = orderMapper.selectByUserAndOrderNo(userId, orderNo); if (order == null) { return ServerRespond.createByErrorMessage("用户没有该订单"); } resultMap.put("orderNo", String.valueOf(order.getOrderNo())); // (必填) 商户网站订单系统中唯一订单号，64个字符以内，只能包含字母、数字、下划线， // 需保证商户系统端不能重复，建议通过数据库sequence生成， String outTradeNo = order.getOrderNo().toString(); // (必填) 订单标题，粗略描述用户的支付目的。如“xxx品牌xxx门店当面付扫码消费” String subject = new StringBuilder().append("寸金在线商城，订单号：").append(outTradeNo).toString(); // (必填) 订单总金额，单位为元，不能超过1亿元 // 如果同时传入了【打折金额】,【不可打折金额】,【订单总金额】三者,则必须满足如下条件:【订单总金额】=【打折金额】+【不可打折金额】 String totalAmount = order.getPayment().toString(); // (可选) 订单不可打折金额，可以配合商家平台配置折扣活动，如果酒水不参与打折，则将对应金额填写至此字段 // 如果该值未传入,但传入了【订单总金额】,【打折金额】,则该值默认为【订单总金额】-【打折金额】 String undiscountableAmount = "0"; // 卖家支付宝账号ID，用于支持一个签约账号下支持打款到不同的收款账号，(打款到sellerId对应的支付宝账号) // 如果该字段为空，则默认为与支付宝签约的商户的PID，也就是appid对应的PID String sellerId = ""; // 订单描述，可以对交易或商品进行一个详细地描述，比如填写"购买商品2件共15.00元" String body = new StringBuilder().append("订单").append(outTradeNo).append("购买商品共").append(totalAmount).append("元").toString(); // 商户操作员编号，添加此参数可以为商户操作员做销售统计 String operatorId = "test_operator_id"; // (必填) 商户门店编号，通过门店号和商家后台可以配置精准到门店的折扣信息，详询支付宝技术支持 String storeId = "test_store_id"; // 业务扩展参数，目前可添加由支付宝分配的系统商编号(通过setSysServiceProviderId方法)，详情请咨询支付宝技术支持 ExtendParams extendParams = new ExtendParams(); extendParams.setSysServiceProviderId("2088100200300400500"); // 支付超时，定义为120分钟 String timeoutExpress = "120m"; // 商品明细列表，需填写购买商品详细信息， List&lt;GoodsDetail> goodsDetailList = new ArrayList&lt;GoodsDetail>(); List&lt;OrderItem> orderItemList = orderItemMapper.getByOrderNoUserId(orderNo, userId); System.out.println(orderItemList.get(0)); for (OrderItem orderItem : orderItemList) { GoodsDetail goods = GoodsDetail.newInstance(orderItem.getProductId().toString(), orderItem.getProductName().toString(), BigDecimalUtil.mul(orderItem.getCurrentUnitPrice().doubleValue(), new Double(100).doubleValue()).longValue(), orderItem.getQuantity()); goodsDetailList.add(goods); } // // 创建一个商品信息，参数含义分别为商品id（使用国标）、名称、单价（单位为分）、数量，如果需要添加商品类别，详见GoodsDetail // GoodsDetail goods1 = GoodsDetail.newInstance("goods_id001", "xxx小面包", 1000, 1); // // 创建好一个商品后添加至商品明细列表 // goodsDetailList.add(goods1); // // // 继续创建并添加第一条商品信息，用户购买的产品为“黑人牙刷”，单价为5.00元，购买了两件 // GoodsDetail goods2 = GoodsDetail.newInstance("goods_id002", "xxx牙刷", 500, 2); // goodsDetailList.add(goods2); // 创建扫码支付请求builder，设置请求参数 AlipayTradePrecreateRequestBuilder builder = new AlipayTradePrecreateRequestBuilder() .setSubject(subject).setTotalAmount(totalAmount).setOutTradeNo(outTradeNo) .setUndiscountableAmount(undiscountableAmount).setSellerId(sellerId).setBody(body) .setOperatorId(operatorId).setStoreId(storeId).setExtendParams(extendParams) .setTimeoutExpress(timeoutExpress) .setNotifyUrl(PropertiesUtil.getProperty("alipay.callback.url"))//支付宝服务器主动通知商户服务器里指定的页面http路径,根据需要设置 .setGoodsDetailList(goodsDetailList); /** 一定要在创建AlipayTradeService之前调用Configs.init()设置默认参数 * Configs会读取classpath下的zfbinfo.properties文件配置信息，如果找不到该文件则确认该文件是否在classpath目录 */ Configs.init("zfbinfo.properties"); /** 使用Configs提供的默认参数 * AlipayTradeService可以使用单例或者为静态成员对象，不需要反复new */ AlipayTradeService tradeService = new AlipayTradeServiceImpl.ClientBuilder().build(); AlipayF2FPrecreateResult result = tradeService.tradePrecreate(builder); 接着就是出参，二维码的生成，并展示给用户支付。图片展示通过上传到图片服务器的方式。所以前提得已经有一个ftp服务器和连接服务器的ftp工具类。 switch (result.getTradeStatus()) { case SUCCESS: log.info(&quot;支付宝预下单成功: )&quot;); AlipayTradePrecreateResponse response = result.getResponse(); dumpResponse(response); // 关键部分，把生成二维码上传到图片服务器 File folder = new File(path); if (!folder.exists()) { folder.setWritable(true); folder.mkdirs(); } // 需要修改为运行机器上的路径 //替换s占位符 String QRPath = String.format(path + &quot;/qr-%s.png&quot;, response.getOutTradeNo()); String qrFileName = String.format(&quot;qr-%s.png&quot;, response.getOutTradeNo()); //支付宝调用guava生成二维码 ZxingUtils.getQRCodeImge(response.getQrCode(), 256, QRPath); File targetFile = new File(path, qrFileName); try { FTPUtil.uploadFile(Lists.newArrayList(targetFile)); } catch (IOException e) { log.error(&quot;上传二维码异常&quot;, e); } log.info(&quot;QRPath:&quot; + QRPath); String qrUrl = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;) + targetFile.getName(); resultMap.put(&quot;qrUrl&quot;, qrUrl); return ServerRespond.createBySuccess(resultMap); case FAILED: log.error(&quot;支付宝预下单失败!!!&quot;); return ServerRespond.createByErrorMessage(&quot;支付宝预下单失败&quot;); case UNKNOWN: log.error(&quot;系统异常，预下单状态未知!!!&quot;); return ServerRespond.createByErrorMessage(&quot;系统异常，预下单状态未知!!!&quot;); default: log.error(&quot;不支持的交易状态，交易返回异常!!!&quot;); return ServerRespond.createByErrorMessage(&quot;不支持的交易状态，交易返回异常!!!&quot;); } 3、支付宝回调接口这个授权支付宝调用的接口，所以不能是本地ip，必须得有一个外网ip，最直接的方式是服务器上操作，但显然现在是没办法这样做的，于是采用了内网穿透的办法，内网穿透工具我采用ngrok，缺点是不能绑定固定域名。授权回调接口： public ServerRespond aliCallback(Map&lt;String, String&gt; params) { //处理回调数据 Long orderNo = Long.parseLong(params.get(&quot;out_trade_no&quot;)); String tradeNo = params.get(&quot;trade_no&quot;); String tradeStatus = params.get(&quot;trade_status&quot;); Order order = orderMapper.selectByOrderNo(orderNo); if (order == null) { return ServerRespond.createByErrorMessage(&quot;寸金商场订单，回调忽略&quot;); } if (order.getStatus() &gt;= Const.OrderStatus.PAID.getCode()) { return ServerRespond.createBySuccess(&quot;支付宝重复调用&quot;); } if (Const.alipayCallback.TRADE_STATUS_TRADE_SUCCESS.equals(tradeStatus)) { order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;))); order.setStatus(Const.OrderStatus.PAID.getCode()); orderMapper.updateByPrimaryKeySelective(order); } PayInfo payInfo = new PayInfo(); payInfo.setUserId(order.getUserId()); payInfo.setOrderNo(order.getOrderNo()); payInfo.setPayPlatform(Const.PayPlatFormEnum.ALIPAY.getCode()); payInfo.setPlatformNumber(tradeNo); payInfo.setPlatformStatus(tradeStatus); payInfoMapper.insert(payInfo); return ServerRespond.createBySuccess(); } 关于回调接口可以看看文档。 第一步： 在通知返回参数列表中，除去sign、sign_type两个参数外，凡是通知返回回来的参数皆是待验签的参数。 这一步很重要，不然没办法验签，看源码,便可知sdk已经做了，接着组装StringBuffer，因为StringBuffer是线程安全的，可以以应付高并发操作。 第三步： 将签名参数（sign）使用base64解码为字节码串。 这一步sdk也做了。 第四步： 使用RSA的验签方法，通过签名字符串、签名参数（经过base64解码）及支付宝公钥验证签名。 然而需要注意的是上面这个方法实际上是不ok的，因为它的算法请求类型跟配置中的不一致。我们的请求算法类型是RSA2不是SHA1WithRSA。然而还有一个函数重载允许多了一个可以选择加密类型的参数。点击rsaCheck，当signType的值equal不同的值调用不同的方法，很明显第二个就是我们要的。于是在控制器中就得这样写： 五、对接测试完成接口编写后就是接口测试从数据库中提一个未付款的订单号做测试成功的话会返回一个付款二维码打开该二维码：如图则已经对接成功：以上就是支付宝集成的主要过程，代码只是贴了一部分具体可以看这里。 六、总结*虽然官方的说明已经够详细了，但是真正入手去做还是有很多坑，此次对接过程中学习很多，其中尤其要注意的是因为官方的关系，sdk必须放在lib下，为了打包时能够同其他依赖包一起打包，还需配置好对sdk的打包插件，其他支付宝需要的依赖包如果用maven引入的话尽量保持版本一致或者一起跟支付宝sdk一同从Demo中复制过来放在lib包下。*]]></content>
  </entry>
  <entry>
    <title><![CDATA[SSM强化学习：从零到部署]]></title>
    <url>%2F2018%2F09%2F14%2FSSM%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%88%B0%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[SSM强化学习：从零到部署本次是一次对SSM高级整合的练手，主要加强基本使用SSM做增删改查操作。项目内容是对员工数据的增删改查,其中删除有批量删除和单个删除。在项目开始之前先建两张表分别为员工表Employee和部门表dept： -- ---------------------------- -- Table structure for tbl_dept -- ---------------------------- DROP TABLE IF EXISTS `tbl_dept`; CREATE TABLE `tbl_dept` ( `deot_id` int(11) NOT NULL AUTO_INCREMENT, `dept_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL, PRIMARY KEY (`deot_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; -- ---------------------------- -- Table structure for tbl_emp -- ---------------------------- DROP TABLE IF EXISTS `tbl_emp`; CREATE TABLE `tbl_emp` ( `emp_id` int(11) NOT NULL AUTO_INCREMENT, `emp_name` varchar(235) NOT NULL, `gender` char(1) DEFAULT NULL, `emil` varchar(255) DEFAULT NULL, `d_id` int(11) DEFAULT NULL, PRIMARY KEY (`emp_id`), KEY `fk_emp_deptt` (`d_id`), CONSTRAINT `fk_emp_dept` FOREIGN KEY (`d_id`) REFERENCES `tbl_dept` (`deot_id`), CONSTRAINT `fk_emp_deptt` FOREIGN KEY (`d_id`) REFERENCES `tbl_dept` (`deot_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; SET FOREIGN_KEY_CHECKS = 1; 一、基础环境的搭建1、创建一个maven工程 2、引入项目依赖的jar包&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>com.qroxy&lt;/groupId> &lt;artifactId>ssm&lt;/artifactId> &lt;version>0.0.1-SNAPSHOT&lt;/version> &lt;packaging>war&lt;/packaging> &lt;!-- 引入项目依赖包 --> &lt;!-- springMVC --> &lt;dependencies> &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-webmvc&lt;/artifactId> &lt;version>4.3.7.RELEASE&lt;/version> &lt;/dependency> &lt;!--spring-Jdbc --> &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-jdbc&lt;/artifactId> &lt;version>4.3.7.RELEASE&lt;/version> &lt;/dependency> &lt;!-- spring 面向切面编程 --> &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-aspects&lt;/artifactId> &lt;version>4.3.7.RELEASE&lt;/version> &lt;!--mybatis--> &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --> &lt;/dependency> &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --> &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis&lt;/artifactId> &lt;version>3.4.2&lt;/version> &lt;/dependency> &lt;!-- mybtis整合适配包 --> &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --> &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis-spring&lt;/artifactId> &lt;version>1.3.1&lt;/version> &lt;/dependency> &lt;!-- springTest --> &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-test&lt;/artifactId> &lt;version>4.3.7.RELEASE&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;!-- 数据库连接池--> &lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --> &lt;dependency> &lt;groupId>c3p0&lt;/groupId> &lt;artifactId>c3p0&lt;/artifactId> &lt;version>0.9.1.2&lt;/version> &lt;/dependency> &lt;!-- mysql 驱动包 --> &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>8.0.11&lt;/version> &lt;/dependency> &lt;!-- web工程标配包（jstl,servlet-api,junit) --> &lt;!-- https://mvnrepository.com/artifact/jstl/jstl --> &lt;dependency> &lt;groupId>jstl&lt;/groupId> &lt;artifactId>jstl&lt;/artifactId> &lt;version>1.2&lt;/version> &lt;/dependency> &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --> &lt;dependency> &lt;groupId>javax.servlet&lt;/groupId> &lt;artifactId>javax.servlet-api&lt;/artifactId> &lt;version>3.1.0&lt;/version> &lt;!-- scop标签作用：服务器已经有 --> &lt;scope>provided&lt;/scope> &lt;/dependency> &lt;!-- https://mvnrepository.com/artifact/junit/junit --> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.12&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;/dependency> &lt;/dependencies> &lt;/project> 二、引入bootstrap前端框架为了快速搭建前端页面，使用了bootstrap框架。在WEB-INF下新建一个static文件夹存放bootstrap和js。 三、编写SSM整合的关键配置文件1、首先是web.xml&lt;?xml version="1.0" encoding="UTF-8"?> &lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5"> &lt;!--1、启动Spring的容器 applicationContext.xml为spring配置文件 --> &lt;!-- needed for ContextLoaderListener --> &lt;context-param> &lt;param-name>contextConfigLocation&lt;/param-name> &lt;param-value>classpath:applicationContext.xml&lt;/param-value> &lt;/context-param> &lt;!-- Bootstraps the root web application context before servlet initialization --> &lt;listener> &lt;listener-class>org.springframework.web.context.ContextLoaderListener&lt;/listener-class> &lt;/listener> &lt;!--2、springmvc的前端控制器，拦截所有请求 --> &lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --> &lt;servlet> &lt;servlet-name>dispatcherServlet&lt;/servlet-name> &lt;servlet-class>org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class> &lt;load-on-startup>1&lt;/load-on-startup> &lt;/servlet> &lt;!-- Map all requests to the DispatcherServlet for handling --> &lt;servlet-mapping> &lt;servlet-name>dispatcherServlet&lt;/servlet-name> &lt;url-pattern>/&lt;/url-pattern> &lt;/servlet-mapping> &lt;!-- 3、字符编码过滤器，一定要放在所有过滤器之前 --> &lt;filter> &lt;filter-name>CharacterEncodingFilter&lt;/filter-name> &lt;filter-class>org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class> &lt;init-param> &lt;param-name>encoding&lt;/param-name> &lt;param-value>utf-8&lt;/param-value> &lt;/init-param> &lt;init-param> &lt;param-name>forceRequestEncoding&lt;/param-name> &lt;param-value>true&lt;/param-value> &lt;/init-param> &lt;init-param> &lt;param-name>forceResponseEncoding&lt;/param-name> &lt;param-value>true&lt;/param-value> &lt;/init-param> &lt;/filter> &lt;filter-mapping> &lt;filter-name>CharacterEncodingFilter&lt;/filter-name> &lt;url-pattern>/*&lt;/url-pattern> &lt;/filter-mapping> &lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --> &lt;filter> &lt;filter-name>HiddenHttpMethodFilter&lt;/filter-name> &lt;filter-class>org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class> &lt;/filter> &lt;filter-mapping> &lt;filter-name>HiddenHttpMethodFilter&lt;/filter-name> &lt;url-pattern>/*&lt;/url-pattern> &lt;/filter-mapping> &lt;filter> &lt;filter-name>HttpPutFormContentFilter&lt;/filter-name> &lt;filter-class>org.springframework.web.filter.HttpPutFormContentFilter&lt;/filter-class> &lt;/filter> &lt;filter-mapping> &lt;filter-name>HttpPutFormContentFilter&lt;/filter-name> &lt;url-pattern>/*&lt;/url-pattern> &lt;/filter-mapping> &lt;/web-app> 需要注意的是使用rest风格uri时需要添加一个拦截PUT的拦截器，具体实现看HttpPutFormContentFilter这个类。 2、spring核心配置文件该文件需放在resource下 &lt;?xml version="1.0" encoding="UTF-8"?> &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"> &lt;context:component-scan base-package="com.qroxy"> &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> &lt;/context:component-scan> &lt;!-- ============Spring的配置文件，这里要配置和业务逻辑相关的bean --> &lt;!-- 数据源，事务控制xxx --> &lt;context:property-placeholder location="classpath:dbconfig.properties"/> &lt;bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> &lt;property name="jdbcUrl" value="${jdbc.jdbcUrl}">&lt;/property> &lt;property name="driverClass" value="${jdbc.driverClass}">&lt;/property> &lt;property name="user" value="${jdbc.password}">&lt;/property> &lt;property name="password" value="${jdbc.user}">&lt;/property> &lt;/bean> &lt;!--================== 配置和MyBatis的整合=============== --> &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> &lt;!-- 指定mybatis全局配置文件的位置 --> &lt;property name="configLocation" value="classpath:mybatis-config.xml">&lt;/property> &lt;property name="dataSource" ref="pooledDataSource">&lt;/property> &lt;!-- 指定mybatis，mapper文件的位置 --> &lt;property name="mapperLocations" value="classpath:mapper/*.xml">&lt;/property> &lt;/bean> &lt;!-- 配置扫描器，将mybatis接口的实现加入ioc容器中 --> &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> &lt;!-- 扫描dao接口实现，加入ioc容器中 --> &lt;property name="basePackage" value="com.qroxy.crud.dao">&lt;/property> &lt;/bean> &lt;!-- 配置一个可以批量的sqlsession--> &lt;bean id="SqlSession" class="org.mybatis.spring.SqlSessionTemplate"> &lt;constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" >&lt;/constructor-arg> &lt;constructor-arg name="executorType" value="BATCH">&lt;/constructor-arg> &lt;/bean> &lt;!-- ========事务控制配置 --> &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> &lt;!-- 控制住数据源 --> &lt;property name="dataSource" ref="pooledDataSource">&lt;/property> &lt;/bean> &lt;!--开启基于注解的事务，使用xml形式的事务（主要使用配置xml方式） --> &lt;aop:config> &lt;!-- 切入点表达式,双点表示子包也能扫描得到,括号里面表示事务任意多 --> &lt;aop:pointcut expression="execution(* com.qroxy.crud.service..*(..))" id="txPoint"/> &lt;!-- 配置事务增强 --> &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/> &lt;/aop:config> &lt;!-- 配置事务增强 ，如何启动--> &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"> &lt;tx:attributes> &lt;!-- 所有方法都是事务方法 --> &lt;tx:method name="*"/> &lt;!-- 以get开头的所有方法 --> &lt;tx:method name="get*" read-only="true"/> &lt;/tx:attributes> &lt;/tx:advice> &lt;!-- Spring配置文件的核心点（数据源，与mybatis的整合，事务控制） --> &lt;/beans> 主要是对事务和mybatis整合的配置，其中： &lt;!-- 配置一个可以批量的sqlsession--&gt; &lt;bean id=&quot;SqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt; &lt;constructor-arg name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; &gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=&quot;executorType&quot; value=&quot;BATCH&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; 只是用来批量生成数据的sqlseesion。在整合完成且逆向生成文件后，测试其实现方式如下： &lt;!--省去相关注解--> EmployeeMapper mapper=SqlSession.getMapper(EmployeeMapper.class); for (int i = 0; i &lt; 1000; i++) { String uuid=UUID.randomUUID().toString().substring(0, 5)+""+i; mapper.insertSelective(new Employee(null, uuid, "W", uuid+"@qroxy.cn", 2)); } 3、配置mybatis文件文件位置与spring配置文件位置一致 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;settings&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.qroxy.crud.bean&quot;/&gt; &lt;/typeAliases&gt; &lt;plugins&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;!-- 分页合理化参数,避免出现页数为负或者超过总页数--&gt; &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/configuration&gt; 4、SpringMVC文件的配置该文件放在WEB_IN目录下 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&gt; &lt;!-- springMVC的配置文件，包括网站跳转逻辑的控制，配置 --&gt; &lt;context:component-scan base-package=&quot;com.qroxy&quot; use-default-filters=&quot;false&quot;&gt; &lt;!-- 只扫描控制器 --&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;!-- 配置视图解析器 方便页面返回 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 两个标准配置 --&gt; &lt;!--将springMVC不能处理的请求交给tomcat --&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!-- 支持springMVC更高级的一些功能，JSR303校验，快捷ajax，映射动态请求--&gt; &lt;mvc:annotation-driven/&gt; &lt;/beans&gt; 以上就是对SSM的一个初步整合，要对员工数据进行增删改查还得需要使用mybatis的逆向工程生成对应的bean以 及mapper。 四、mybatis的逆向工程可去mybatis官网看下相关文档，根据需要配置。 &lt;?xml version="1.0" encoding="UTF-8"?> &lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"> &lt;generatorConfiguration> &lt;context id="DB2Tables" targetRuntime="MyBatis3"> &lt;commentGenerator> &lt;property name="suppressAllComments" value="true" /> &lt;/commentGenerator> &lt;!-- 配置数据库连接 --> &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/ssm_crud" userId="root" password="123456"> &lt;/jdbcConnection> &lt;javaTypeResolver> &lt;property name="forceBigDecimals" value="false" /> &lt;/javaTypeResolver> &lt;!-- 指定javaBean生成的位置 --> &lt;javaModelGenerator targetPackage="com.atguigu.crud.bean" targetProject=".\src\main\java"> &lt;property name="enableSubPackages" value="true" /> &lt;property name="trimStrings" value="true" /> &lt;/javaModelGenerator> &lt;!--指定sql映射文件生成的位置 --> &lt;sqlMapGenerator targetPackage="mapper" targetProject=".\src\main\resources"> &lt;property name="enableSubPackages" value="true" /> &lt;/sqlMapGenerator> &lt;!-- 指定dao接口生成的位置，mapper接口 --> &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.atguigu.crud.dao" targetProject=".\src\main\java"> &lt;property name="enableSubPackages" value="true" /> &lt;/javaClientGenerator> &lt;!-- table指定每个表的生成策略 --> &lt;table tableName="tbl_emp" domainObjectName="Employee">&lt;/table> &lt;table tableName="tbl_dept" domainObjectName="Department">&lt;/table> &lt;/context> &lt;/generatorConfiguration> 运行配置文件，官方提供了java文件运行和maven运行两种方式，这里采用java方式，在test包下新建一个类，点开Running MyBatis Generator选项，选择java运行模版如下： package com.atguigu.crud.test; import java.io.File; import java.util.ArrayList; import java.util.List; import org.mybatis.generator.api.MyBatisGenerator; import org.mybatis.generator.config.Configuration; import org.mybatis.generator.config.xml.ConfigurationParser; import org.mybatis.generator.internal.DefaultShellCallback; public class MBGTest { public static void main(String[] args) throws Exception { List&lt;String> warnings = new ArrayList&lt;String>(); boolean overwrite = true; File configFile = new File("mbg.xml"); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); } } 右键运行就会生成对于javabean和xml等文件。 五、用传统的方式做一个简单的查询具体实现过程： 1、访问index.jsp页面项目运行进入首页 2、index.jsp页面发送出查询员工列表请求在inde.jsp页面做一个跳转： &lt;jsp:forward page="/emps">&lt;/jsp:forward> 3、EmployeeController来接受请求，查出员工数据简单写一个控制器： @RequestMapping("/emps") public String getEmps(@RequestParam(value = "pn", defaultValue = "1") Integer pn,Model model){ // 这不是一个分页查询 // 引入PageHelper插件 // 在查询之前只需要调用,传入页码以及页码大小 PageHelper.startPage(pn, 10); // startPage后面紧跟的这个查询就是分页查询 List&lt;Employee> emps = employeeService.getAll(); // 使用pageInfo包装查询结果，只需要把pageInfo交给页面就行 // 封装了详细的分页信息，包括查询出来数据，连续显示的页数譬如5 PageInfo page = new PageInfo(emps,5); model.addAttribute("PageInfo",page); return "list"; } 因为要做分页处理，还得引入PageHelper相关依赖，并进行配置。 !--引入PageHelper分页插件 --> &lt;dependency> &lt;groupId>com.github.pagehelper&lt;/groupId> &lt;artifactId>pagehelper&lt;/artifactId> &lt;version>5.0.0&lt;/version> &lt;/dependency> 并在mybatis配置文件做一个配置。（已配置） 4、来到list.jsp页面进行展示在WEB_INF下新建一个views文件再里面建一个list.jsp文件： &lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> &lt;%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %> &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> &lt;html> &lt;head> &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> &lt;title>员工列表&lt;/title> &lt;% pageContext.setAttribute("APP_PATH", request.getContextPath()); %> &lt;!-- web路径，不以/开始的相对路径，找资源，以当前路径为标准，经常出问题 以/开始的相对路径。找资源，以服务器路径为准,需要加上项目名 http://localhost:3306/crud --> &lt;script src="${ APP_PATH}/static/js/jquery-1.12.4.min.js">&lt;/script> &lt;!-- 引入Bootstrap样式 --> &lt;link href="${ APP_PATH}/static/bootstrap-3.3.7-dist/css/bootstrap.min.css" rel="stylesheet"> &lt;!-- 引入Bootstrapjs --> &lt;script src="${ APP_PATH}/static/bootstrap-3.3.7-dist/js/bootstrap.min.js">&lt;/script> &lt;/head> &lt;body> &lt;!-- 显示页面--> &lt;div class="container"> &lt;!--标题 --> &lt;div class="row"> &lt;div class=".col-md-12"> &lt;h1>SSM_CRUD&lt;/h1> &lt;/div> &lt;/div> &lt;!--按钮 --> &lt;div class="row"> &lt;div class="col-md-2 col-md-offset-10"> &lt;button class="btn btn-primary btn-sm">新增&lt;/button> &lt;button class="btn btn-danger btn-sm">删除&lt;/button> &lt;/div> &lt;/div> &lt;!-- 显示数据 --> &lt;div class="row"> &lt;div class="col-md-12"> &lt;table class="table table-hover"> &lt;tr> &lt;th>#&lt;/th> &lt;th>empName&lt;/th> &lt;th>gender&lt;/th> &lt;th>email&lt;/th> &lt;th>deptName&lt;/th> &lt;th>操作&lt;/th> &lt;/tr> &lt;c:forEach items="${PageInfo.list }" var="emp"> &lt;tr> &lt;th>${emp.empId }&lt;/th> &lt;th>${emp.empName }&lt;/th> &lt;th>${emp.gender=="M"?"男":"女" }&lt;/th> &lt;th>${emp.email }&lt;/th> &lt;th>${emp.department.deptName }&lt;/th> &lt;th> &lt;button class="btn-primary btn-sm"> &lt;span class="glyphicon glyphicon-pencil" aria-hidden="true">&lt;/span>编辑 &lt;/button> &lt;button class="btn-danger btn-sm"> &lt;span class="glyphicon glyphicon-trash" aria-hidden="true">&lt;/span>删除 &lt;/button> &lt;/th> &lt;/tr> &lt;/c:forEach> &lt;/table> &lt;/div> &lt;/div> &lt;!-- 显示分页信息栏 --> &lt;div class="row"> &lt;!-- 分页文字信息 --> &lt;div class="col-md-6"> 当前第${PageInfo.pageNum }页,总${PageInfo.pages }页,总${PageInfo.total }记录 &lt;/div> &lt;div class="col-md-6"> &lt;nav aria-label="Page navigation"> &lt;ul class="pagination"> &lt;li>&lt;a href="${APP_PATH }/emps?pn=1">首页&lt;/a>&lt;/li> &lt;c:if test="${PageInfo.hasPreviousPage }"> &lt;li>&lt;a href="${ APP_PATH}/emps?pn=${PageInfo.pageNum-1}" aria-label="Previous"> &lt;span aria-hidden="true">&amp;laquo;&lt;/span> &lt;/a>&lt;/li> &lt;/c:if> &lt;c:forEach items="${PageInfo.navigatepageNums }" var="page_Num"> &lt;c:if test="${page_Num==PageInfo.pageNum }"> &lt;li class="active">&lt;a href="#">${page_Num}&lt;/a>&lt;/li> &lt;/c:if> &lt;c:if test="${page_Num!=PageInfo.pageNum }"> &lt;li>&lt;a href="${ APP_PATH}/emps?pn=${page_Num}">${page_Num}&lt;/a>&lt;/li> &lt;/c:if> &lt;/c:forEach> &lt;c:if test="${PageInfo.hasNextPage }"> &lt;li>&lt;a href="${ APP_PATH}/emps?pn=${PageInfo.pageNum+1}" aria-label="Next"> &lt;span aria-hidden="true">&amp;raquo;&lt;/span> &lt;/a>&lt;/li> &lt;/c:if> &lt;li>&lt;a href="${APP_PATH }/emps?pn=${PageInfo.pages}">末页&lt;/a>&lt;/li> &lt;/ul> &lt;/nav> &lt;/div> &lt;/div> &lt;/div> &lt;/body> &lt;/html> 5、pageHelper分页插件完成分页查询功能 六、利用ajax来请求数据渲染前端页面前面使用传统的渲染页面，不但效率差，还对服务器性能有影响，并且这种方式只能在浏览器实现，终端耦合高，而使用ajax来请求数据的话就相对来说没有以上的缺点或者影响更小。主要实现过程如下（以查询员工为例）： 1、index.jsp页面直接发送ajax请求进行员工分页数据的查询$(function() { //去首页 to_page(1) }); //抽离方法 function to_page(pn) { $.ajax({ url : "${APP_PATH}/emps", data : "pn=" + pn, type : "GET", success : function(result) { //console.log(result) //1、解析并显示员工数据 build_emps_table(result); //2、解析并显示分页信息 build_page_info(result); //3、解析分页条信息 build_page_nav(result); } }); } function build_emps_table(result) { //请空表格 $("#emps_tables tbody").empty(); var emps = result.extend.PageInfo.list; $.each(emps, function(index, item) { var empIdTd = $("&lt;td>&lt;/td>").append(item.empId); var empIdNameTd = $("&lt;td>&lt;/td>").append(item.empName); var genderTd = $("&lt;td>&lt;/td>").append( item.gender == 'M' ? "男" : "女"); var emailTd = $("&lt;td>&lt;/td>").append(item.email); var departmentTd = $("&lt;td>&lt;/td>").append( item.department.deptName); var editBtn = $("&lt;button>&lt;/button>").addClass( "btn-primary btn-sm btn_edit").attr("id","btn_edit").append( $("&lt;span>&lt;/span>").addClass( "glyphicon glyphicon-pencil")).append("编辑"); //添加一个属性value是id值 editBtn.attr("edit_id",item.empId); var deletBtn = $("&lt;button>&lt;/button>").addClass( "btn-danger btn-sm").attr("id","btn_delet").append( $("&lt;span>&lt;/span>") .addClass("glyphicon glyphicon-trash")).append( "删除"); deletBtn.attr("delet_id",item.empId); var butnTd = $("&lt;td>&lt;/td>").append(editBtn).add(deletBtn); /* append方法执行完成以后还是返回原来的元素*/ $("&lt;tr>&lt;/tr>").append(empIdTd).append(empIdNameTd).append( empIdNameTd).append(genderTd).append(emailTd) .append(departmentTd).append(butnTd) .appendTo("#emps_tables tbody"); }) } //解析显示分页信息 function build_page_info(result) { $("#page_info").empty(); $("#page_info").append( "当前第" + result.extend.PageInfo.pageNum + "页，总" + result.extend.PageInfo.pages + "页，总" + result.extend.PageInfo.total + "条记录") currentPage=result.extend.PageInfo.pageNum; } //解析显示分条信息,点击分页有跳转动作 function build_page_nav(result) { $("#page_nav").empty(); //page_nav var ul = $("&lt;ul>&lt;/ul>").addClass("pagination"); //构建元素 var firstPage = $("&lt;li>&lt;/li>").append( $("&lt;a>&lt;/a>").append("首页").attr("href", "#")); var prePage = $("&lt;li>&lt;/li>").append($("&lt;a>&lt;/a>").append("&amp;laquo;")); if (result.extend.PageInfo.hasPreviousPage == false) { prePage.addClass("disabled"); firstPage.addClass("disabled"); } else { //首页 firstPage.click(function() { to_page(1); }); //点击上一页跳转动作 prePage.click(function() { to_page(result.extend.PageInfo.pageNum - 1); }); } var nextPage = $("&lt;li>&lt;/li>") .append($("&lt;a>&lt;/a>").append("&amp;raquo;")); var lastPage = $("&lt;li>&lt;/li>").append( $("&lt;a>&lt;/a>").append("末页").attr("href", "#")); if (result.extend.PageInfo.hasNextPage == false) { nextPage.addClass("disabled"); lastPage.addClass("disabled"); } else { //点击下一页跳转动作 nextPage.click(function() { to_page(result.extend.PageInfo.pageNum + 1); }); //末页 lastPage.click(function() { to_page(result.extend.PageInfo.pages); }); } ul.append(firstPage).append(prePage); //添加首页和前一页 //1，2，3，，4，5添加页码提示 $.each(result.extend.PageInfo.navigatepageNums, function(index, item) { var numLi = $("&lt;li>&lt;/li>").append($("&lt;a>&lt;/a>").append(item)); if (result.extend.PageInfo.pageNum == item) { numLi.addClass("active"); } //点击上一页跳转动作 numLi.click(function() { to_page(item); }); ul.append(numLi); }); //全部添加完后，再添加最后一页和下一页提示 ul.append(nextPage).append(lastPage); var navEle = $("&lt;nav>&lt;/nav>").append(ul); navEle.appendTo("#page_nav"); numLi.click(function() { to_page(item); }); } function reset_form(ele){ $(ele)[0].reset(); //清空表单样式 $(ele).find("*").removeClass("has-error has-success"); $(ele).find(".help-block").text(""); } 2、服务器将查出的数据，以json字符串的形式返回给浏览器要服务器能json的方式返回数据，还要引入json包 &lt;!-- 引入json包 --> &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --> &lt;dependency> &lt;groupId>com.fasterxml.jackson.core&lt;/groupId> &lt;artifactId>jackson-databind&lt;/artifactId> &lt;version>2.8.8&lt;/version> &lt;/dependency> java实现： /* * 用responseBody生成json数据，必须先导入jackson包 */ @RequestMapping("/emps") @ResponseBody public Msg getEmpWithJson(@RequestParam(value = "pn", defaultValue = "1") Integer pn) { // 这不是一个分页查询 // 引入PageHelper插件 // 在查询之前只需要调用,传入页码以及页码大小 PageHelper.startPage(pn, 10); // startPage后面紧跟的这个查询就是分页查询 List&lt;Employee> emps = employeeService.getAll(); // 使用pageInfo包装查询结果，只需要把pageInfo交给页面就行 // 封装了详细的分页信息，包括查询出来数据，连续显示的页数譬如5 PageInfo page = new PageInfo(emps,5); return Msg.success().add("PageInfo", page); } 3、浏览器收到js字符串。可以使用js对json进行解析，使用js通过 dom增删改改变页面。进而实现了实现客户端的无关性。 七、数据校验在添加员工和修改员工时为了更好的交互体验和防止数据臃肿，必须对提交数据进行校验。 1、前端校验利用正则表达式对提交数据校验，方法如下： function validate_add_from() { //1、拿到要校验的数据 var empName = $("#empName_add").val(); //数字字母中文 var regName = /(^[a-zA-Z0-9_-]{6,16}$)|(^[\u2E80-\u9FFF]{2,5})/; //校验邮箱信息 var email = $("#email").val(); var regemail = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/; if (regName.test(empName) == false) { show_validate_msg("#empName_add", "error", "用户名不规则！！"); return false; } else { show_validate_msg("#empName_add", "success", ""); } if (regemail.test(email) == false) { show_validate_msg("#email", "error", "邮箱格式不对！！"); return false; } else { show_validate_msg("#email", "success", ""); } return true; } 2、后端校验当有人改了前端判断依据时，前端校验规则就会失效，此时就需要后端对数据重复校验。引入校验依赖 &lt;!-- 支持数据校验JSR303，tomcat7以上的服务器直接导入，以下的服务器：el表达式不是新标准lib中替换新标准--> &lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --> &lt;dependency> &lt;groupId>org.hibernate.validator&lt;/groupId> &lt;artifactId>hibernate-validator&lt;/artifactId> &lt;version>6.0.7.Final&lt;/version> &lt;/dependency> 并在SpringMVC配置文件做好相关配置。在Employee.java对相关需要校验的字段进行注解校验： .... // JSR数据校验 @Pattern(regexp=&quot;^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$&quot;,message=&quot;邮箱格式不对&quot;) private String email; @Pattern(regexp=&quot;(^[a-zA-Z0-9_-]{6,16}$)|(^[\\u2E80-\\u9FFF]{2,5})&quot;,message=&quot;用户名不规则&quot;) private String empName; ... 在控制器中写一个校验接口： /* * 校验用户名是否可用 */ @RequestMapping("/checkuser") @ResponseBody public Msg checkUser(@RequestParam("empName")String empName) { //先判断用户名是否合法的 String regx="(^[a-zA-Z0-9_-]{6,16}$)|(^[\\u2E80-\\u9FFF]{2,5})"; if (!empName.matches(regx)) { return Msg.fail().add("va_msg", "用户名不规则"); } boolean b= employeeService.checkUser(empName); if (b) { return Msg.success(); }else { return Msg.fail().add("va_msg", "用户名不可用"); } } 其对应的service实现类中的方法： public Boolean checkUser(String empName) { EmployeeExample example = new EmployeeExample(); Criteria criteria = example.createCriteria(); criteria.andEmpNameEqualTo(empName); long count = mapper.countByExample(example); if (count == 0) { return true; } else { return false; } } 如果在数据库对数据再加一层校验的话就更加完整了。比如非null判断和字符串个数及字符串格式的判断 八、生成war包部署Tomcat完成项目后，就是部署项目项目。操作如下：成功后就会看到war包：复杂粘贴到tomcat的webapp目录下启动，就会生成对应的目录。 打开目录会发现maven已经把所有需要的依赖都打包好了。 然后也可以访问到该服务器，此时已经不是镜像服务器了，而是实际服务器了。 九、总结本次学习过程让我觉得对Spring实现原理的理解非常重要，SSM最让新手畏惧就是其繁琐的配置，在本次学习过程出现错误最多都是跟配置文件配置有关，且如果对SSM它的实现过程没有一个比较清晰的理解的话，即使出现错误也不能找出原因。做数据处理的时候也经常出错，这个原因是因为对jquery还不够熟悉，因此接下来对juquery和javascript的学习也是尤为重要。]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何使用spring测试模块测试请求功能]]></title>
    <url>%2F2018%2F09%2F11%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8spring%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97%E6%B5%8B%E8%AF%95%E8%AF%B7%E6%B1%82%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[使用spring测试模块测试请求功能SSM项目中使用了PageHelper插件对数据进行拦截与分页。 一、利用Spring提供的测试模块模拟请求首先引入相关依赖： &lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.qroxy&lt;/groupId&gt; &lt;artifactId&gt;ssm&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!-- more --&gt; &lt;!-- 引入项目依赖包 --&gt; &lt;!-- springMVC --&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring-Jdbc --&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring 面向切面编程 --&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;!--mybatis--&gt; &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mybtis整合适配包 --&gt; &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- springTest（本次重点） --&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--引入PageHelper分页插件（本次重点） --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池--&gt; &lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql 驱动包 --&gt; &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;!-- web工程标配包（jstl,servlet-api,junit) --&gt; &lt;!-- https://mvnrepository.com/artifact/jstl/jstl --&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;!-- scop标签作用：服务器已经有 --&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 逆向工程包 --&gt; &lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 二、在 MyBatis 配置 xml 中配置拦截器插件&lt;plugins&gt; &lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;/plugin&gt; &lt;/plugins&gt; ps：必须在后面配置插件 三、新建一个测试类1、引入spring的单元测试使用注解和加载配置文件的注解@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration（配置文件路径） 接着必须再加一个@WebAppConfiguration注解，因为初始化MockMvc时需要注入SpringMVC本身。 使用MockMVC作为虚拟的MVC // 虚拟的mvc请求，获取处理结果 @Autowired WebApplicationContext wContext; MockMvc mockMvc; // 每次用前初始化，ps：用的是junit的before @Before public void initMockMvc() { mockMvc=MockMvcBuilders.webAppContextSetup(wContext).build(); } 四、利用虚拟MVC模拟页面请求，请求员工数据并做分页@Test public void testPAge() throws Exception { MvcResult mvcResult=mockMvc.perform(MockMvcRequestBuilders.get(&quot;/emps&quot;) .param(&quot;pn&quot;, &quot;5&quot;)).andReturn(); // 请求成功后，请求域中会有pageINfo，我们取出pageInfo进行验证 MockHttpServletRequest request=mvcResult.getRequest(); &lt;!-- PageInfo包装数据强行转换--&gt; PageInfo aInfo=(PageInfo)request.getAttribute(&quot;PageInfo&quot;); System.out.println(&quot;当前页码：&quot;+aInfo.getPageNum()); System.out.println(&quot;总页码：&quot;+aInfo.getPages()); System.out.println(&quot;总记录数：&quot;+aInfo.getTotal()); System.out.println(&quot;在页面需要连续显示的的页码：&quot;); int[] nums=aInfo.getNavigatepageNums(); for(int i:nums) { System.out.println(&quot; &quot;+i); } //获取员工数据 List&lt;Employee&gt; list=aInfo.getList(); for(Employee employee:list) { System.out.println(&quot;ID &quot;+employee.getEmpId()+&quot;,name:&quot;+employee.getEmpName()); } } 五、运行测试然后就把测试数据拿出来了。  需要注意的是对MockMVC的初始化以及WebApplicationContext的注入，其他的都是常规操作。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac环境下安装Redis（二）]]></title>
    <url>%2F2018%2F08%2F04%2FMac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Redis%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[此篇文章主要记录Redis如和通过配置文件来启动Redis，以实现后台启动和或加密启动等配置。 ps：安装和使用Redis请看这里。 一、移动配置文件找到之前下载解压的redis文件夹，复制redis.conf文件到/usr/local/etc/目录下。 二、修改配置文件1、打开配置文件，详解如下：################################## INCLUDES ################################### #这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。 # include /path/to/local.conf # include /path/to/other.conf ################################ GENERAL ##################################### #是否在后台执行，yes：后台运行；no：不是后台运行（老版本默认） daemonize yes #3.2里的参数，是否开启保护模式，默认开启。要是配置里没有指定bind和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。要是开启了密码 和bind，可以开启。否 则最好关闭，设置为no。 protected-mode yes #redis的进程文件 pidfile /var/run/redis/redis-server.pid #redis监听的端口号。 port 6379 #此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。 tcp-backlog 511 #指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求 bind 127.0.0.1 #配置unix socket来让redis支持监听本地连接。 # unixsocket /var/run/redis/redis.sock #配置unix socket使用文件的权限 # unixsocketperm 700 # 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。 timeout 0 #tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。 tcp-keepalive 0 #指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息） loglevel notice #指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。 logfile /var/log/redis/redis-server.log #是否打开记录syslog功能 # syslog-enabled no #syslog的标识符。 # syslog-ident redis #日志的来源、设备 # syslog-facility local0 #数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db databases 16 ################################ SNAPSHOTTING ################################ # 快照配置 # 注释掉“save”这一行配置项就可以让保存数据库功能失效 # 设置sedis进行数据库镜像的频率。 # 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） # 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） # 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化） save 900 1 save 300 10 save 60 10000 #当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误 stop-writes-on-bgsave-error yes #使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间 rdbcompression yes #是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。 rdbchecksum yes #rdb文件的名称 dbfilename dump.rdb #数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录 dir /var/lib/redis ################################# REPLICATION ################################# #复制选项，slave复制对应的master。 # slaveof &lt;masterip&gt; &lt;masterport&gt; #如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。 # masterauth &lt;master-password&gt; #当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master in progress”。 slave-serve-stale-data yes #作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。 slave-read-only yes #是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。 repl-diskless-sync no #diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。 repl-diskless-sync-delay 5 #slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。 # repl-ping-slave-period 10 #复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。 # repl-timeout 60 #是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。 repl-disable-tcp-nodelay no #复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。 # repl-backlog-size 5mb #master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。 # repl-backlog-ttl 3600 #当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。 slave-priority 100 #redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。 # min-slaves-to-write 3 #延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。 # min-slaves-max-lag 10 # 设置1或另一个设置为0禁用这个特性。 # Setting one or the other to 0 disables the feature. # By default min-slaves-to-write is set to 0 (feature disabled) and # min-slaves-max-lag is set to 10. ################################## SECURITY ################################### #requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。 # requirepass foobared #把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。 # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 #设置成一个空的值，可以禁止一个命令 # rename-command CONFIG &quot;&quot; ################################### LIMITS #################################### # 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。 # maxclients 10000 #redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。 # maxmemory &lt;bytes&gt; #内存容量超过maxmemory后的处理策略。 #volatile-lru：利用LRU算法移除设置过过期时间的key。 #volatile-random：随机移除设置过过期时间的key。 #volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL） #allkeys-lru：利用LRU算法移除任何key。 #allkeys-random：随机移除任何key。 #noeviction：不移除任何key，只是返回一个写错误。 #上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。 # maxmemory-policy noeviction #lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。 # maxmemory-samples 5 ############################## APPEND ONLY MODE ############################### #默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。 appendonly no #aof文件名 appendfilename &quot;appendonly.aof&quot; #aof持久化策略的配置 #no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。 #always表示每次写入都执行fsync，以保证数据同步到磁盘。 #everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。 appendfsync everysec # 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。 no-appendfsync-on-rewrite no #aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。 auto-aof-rewrite-percentage 100 #设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写 auto-aof-rewrite-min-size 64mb #aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。 aof-load-truncated yes ################################ LUA SCRIPTING ############################### # 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。 lua-time-limit 5000 ################################ REDIS CLUSTER ############################### #集群开关，默认是不开启集群模式。 # cluster-enabled yes #集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突 # cluster-config-file nodes-6379.conf #节点互连超时的阀值。集群节点超时毫秒数 # cluster-node-timeout 15000 #在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是： #比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period #如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 # cluster-slave-validity-factor 10 #master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。 # cluster-migration-barrier 1 #默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。 # cluster-require-full-coverage yes ################################## SLOW LOG ################################### ###slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。 #执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。 slowlog-log-slower-than 10000 #慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。 slowlog-max-len 128 ################################ LATENCY MONITOR ############################## #延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。 latency-monitor-threshold 0 ############################# EVENT NOTIFICATION ############################## #键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。 #notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知： ##K 键空间通知，所有通知以 __keyspace@__ 为前缀 ##E 键事件通知，所有通知以 __keyevent@__ 为前缀 ##g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知 ##$ 字符串命令的通知 ##l 列表命令的通知 ##s 集合命令的通知 ##h 哈希命令的通知 ##z 有序集合命令的通知 ##x 过期事件：每当有过期键被删除时发送 ##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送 ##A 参数 g$lshzxe 的别名 #输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications notify-keyspace-events &quot;&quot; ############################### ADVANCED CONFIG ############################### #数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash hash-max-ziplist-entries 512 #value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。 hash-max-ziplist-value 64 #数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。 list-max-ziplist-entries 512 #value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。 list-max-ziplist-value 64 #数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。 set-max-intset-entries 512 #数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。 zset-max-ziplist-entries 128 #value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。 zset-max-ziplist-value 64 #value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。 hll-sparse-max-bytes 3000 #Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。 activerehashing yes ##对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。 #对于normal client，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。 client-output-buffer-limit normal 0 0 0 #对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。 client-output-buffer-limit slave 256mb 64mb 60 #对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。 client-output-buffer-limit pubsub 32mb 8mb 60 #redis执行任务的频率为1s除以hz。 hz 10 #在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。 aof-rewrite-incremental-fsync yes 2、修改如下内容，以达到绑定ip、密码验证、后台运行等目的:bind 0.0.0.0 //可以绑定任何ip，适应开发需求 daemonize yes //把no改为yes，运行后台运行 requriepass lzq //开启密码验证,ex:密码为lzq ps：修改配置文件时，需把需要修改启用的字段去掉前面的#才能生效 三、Redis+Redis.conf方式启动Redis1.启动命令： redis-server /usr/local/etc/redis.conf 与普通的启用方式的区别是加上配置文件，且必须跟上绝对地址，mac这里有个坑，不跟上会报错。2.检测redis服务器是否启动 重新打开一个终端窗口，输入命令 redis-cli -p 6379 -a lzq ping 该终端输出pong说明服务器运作正常。 3.关闭Redis重新打开一个终端窗口，执行命令：redis-cli -p 6379 -a lzq shutdown然后在另外一个终端窗口执行 redis-cli -p 6379 -a lzq ping 输出Could not connect to Redis at 127.0.0.1:6379: Connection refused则说明已关闭。 到此为止配置单机环境的Redis已经完成，接下来会利用Redis的特性来开发redis-session。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac环境下安装Redis]]></title>
    <url>%2F2018%2F08%2F03%2FUntitled%2F</url>
    <content type="text"><![CDATA[本文主要是mac环境下如何配置redis服务。 ps:windows环境配置大同小异。 一、首先是官网下载redis 下载 stable 版本，稳定版本。 二、安装与编译先找到usr/local目录，也可以直接命令行完成，建议windows可以这样操作，自己mac系统直接命令行出现了错误，找不到改目录，于是手动移动安装目录。 主要分为两步，先是打开访达，command+shift+G跳转目录。 然后使用一下解压命令，或手动解压到该路径下。 解压：tar zxvf redis-4.0.10.tar.gz 移动到： mv redis-4.0.10 /usr/local/ 切换到：cd /usr/local/redis-4.0.10/ 编译测试 sudo make test 编译安装 sudo make install 三、安装成功测试1.安装成功后，输入redis-server启动redis 2.测试redis新建一个终端窗口，输入命令行redis-cli 四、安装redis客户端redis客户端在官网是要收费的，好在作者也是比较良心，开源了项目，可以去github上下载测试版。 ps：需要自己编译，不想麻烦的可以在网上找别人编译好的 因为这是前台开启的，如需推出服务直接在启动窗口command+C即可 又或者可以在客户端执行 SHUTDOWN 可关闭 redis 服务。如果关闭不了就加一个参数，执行 SHUTDOWN NOSAVE 可关闭 redis 服务 测试连接，会显示服务已停止。 五、redis常用命令 命令 用途 set key value 设置 key 的值 get key 获取 key 的值 exists key 查看此 key 是否存在 keys * 查看所有的 key flushall 消除所有的 key 本次使用的是默认的启用方式，下次做一下启动Redis并加载配置文件方式。]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序与后端联调踩坑]]></title>
    <url>%2F2018%2F07%2F31%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E8%B8%A9%E5%9D%91%2F</url>
    <content type="text"><![CDATA[小程序与后端联调踩坑本次练习是以springboot作为后端开发框架、微信小程序做前端交互。 后端代码截图： @RestController @Api(value=&quot;用户注册登录的接口&quot;, tags= {&quot;注册和登录的controller&quot;}) public class RegistLoginController { @Autowired private UserService userService; @ApiOperation(value=&quot;用户注册&quot;, notes=&quot;用户注册的接口&quot;) @PostMapping(&quot;/regist&quot;) public IMoocJSONResult regist(@RequestBody Users user) throws Exception { // 1. 判断用户名和密码必须不为空 if (StringUtils.isBlank(user.getUsername()) || StringUtils.isBlank(user.getPassword())) { return IMoocJSONResult.errorMsg(&quot;用户名和密码不能为空&quot;); } &lt;!-- more --&gt; // 2. 判断用户名是否存在 boolean usernameIsExist = userService.queryUsernameIsExist(user.getUsername()); // 3. 保存用户，注册信息 if (!usernameIsExist) { user.setNickname(user.getUsername()); user.setPassword(MD5Utils.getMD5Str(user.getPassword())); user.setFansCounts(0); user.setReceiveLikeCounts(0); user.setFollowCounts(0); userService.saveUser(user); } else { return IMoocJSONResult.errorMsg(&quot;用户名已经存在，请换一个再试&quot;); } return IMoocJSONResult.ok(); } } service接口层暂时提供两个方法，分别为注册时查询用户是否存在和保存用户。 /** * @Description: 判断用户名是否存在 */ public boolean queryUsernameIsExist(String username); /** * @Description: 保存用户(用户注册) */ public void saveUser(Users user) 实现代码： @Service public class UserServiceImpl implements UserService { @Autowired private UsersMapper userMapper; @Autowired private Sid sid; @Transactional(propagation = Propagation.SUPPORTS) @Override public boolean queryUsernameIsExist(String username) { Users user = new Users(); user.setUsername(username); Users result = userMapper.selectOne(user); return result == null ? false : true; } @Transactional(propagation = Propagation.REQUIRED) @Override public void saveUser(Users user) { // 引用自增id，工具包引入 String userId = sid.nextShort(); user.setId(userId); userMapper.insert(user); } } 前端小程序代码，较为简单： &lt;view&gt; &lt;view class=&quot;login-icon&quot;&gt; &lt;image class=&quot;login-img&quot; src=&quot;../resource/images/dsp.jpg&quot;&gt;&lt;/image&gt; &lt;/view&gt; &lt;view class=&quot;login-from&quot;&gt; &lt;form bindsubmit=&#39;doRegist&#39;&gt; &lt;!--账号--&gt; &lt;view class=&quot;inputView&quot;&gt; &lt;image class=&quot;nameImage&quot; src=&quot;../resource/images/username.png&quot;&gt;&lt;/image&gt; &lt;label class=&quot;loginLabel&quot;&gt;账号&lt;/label&gt; &lt;input name=&quot;username&quot; class=&quot;inputText&quot; placeholder=&quot;请输入账号&quot;/&gt; &lt;/view&gt; &lt;view class=&quot;line&quot;&gt;&lt;/view&gt; &lt;!--密码--&gt; &lt;view class=&quot;inputView&quot;&gt; &lt;image class=&quot;keyImage&quot; src=&quot;../resource/images/password.png&quot;&gt;&lt;/image&gt; &lt;label class=&quot;loginLabel&quot;&gt;密码&lt;/label&gt; &lt;input name=&quot;password&quot; class=&quot;inputText&quot; password=&quot;true&quot; placeholder=&quot;请输入密码&quot;/&gt; &lt;/view&gt; &lt;!--按钮--&gt; &lt;view&gt; &lt;button class=&quot;loginBtn&quot; type=&quot;primary&quot; form-type=&#39;submit&#39;&gt;注册&lt;/button&gt; &lt;/view&gt; &lt;view&gt; &lt;button class=&quot;goLoginBtn&quot; type=&quot;warn&quot; bindtap=&quot;goLoginPage&quot;&gt;返回登录&lt;/button&gt; &lt;/view&gt; &lt;/form&gt; &lt;/view&gt; &lt;/view&gt; 准备工作做完之后，开始小程序与后端程序的联调： 显示在app.js中绑定serverUrl，即后端程序主机地址（开发环境如此设置），注意此次不能填loacalhost，而是所出局域网所分配的地址。 //app.js App({ serverUrl: &quot;http://192.168.1.183:8081&quot;, userInfo: null }) 接着就是要在详情页设置开发环境，跳过域名设置，否则会控制台会提示错误： 并且在app.json启用debug。 值得注意的是在绑定主机地址时要写全地址，比如写成192.168.1.183:8081是会报错的，应写为http://192.168.1.183:8081。 前端调用后端接口时，应先仔细阅读后端提供接口文档： const app = getApp() Page({ data: { }, doRegist: function(e){ var formObject=e.detail.value; var username =formObject.username; var password=formObject.password; // 简单验证 if(username.length==0||password.length==0){ wx.showToast({ title: &#39;用户名和密码不能为空！&#39;, icon: &#39;none&#39;, //延迟时间 duration: 3000, }) } else{ var serverUrl=app.serverUrl; wx.request({ url: serverUrl+&#39;/regist&#39;,//此次对应后端提供接口 method: &quot;POST&quot;,//此次对应后端提供接口 data:{ username: username, password: password }, header:{ &#39;content-type&#39;: &#39;application/json&#39; // 默认值 }, success:function(res){ console.log(res.data); } }) } } }) 对应springboot整合swagger2接口生成文档： 小程序的回调函数返回的数据要与swagger页面调试返回的状态吗一致，这样联调就成功了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[林镇权]]></title>
    <url>%2F2018%2F07%2F12%2F%E6%9E%97%E9%95%87%E6%9D%83%2F</url>
    <content type="text"><![CDATA[一切没发生就好了！!]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2F2018%2F07%2F12%2Fhello%2F</url>
    <content type="text"><![CDATA[这是一个示范！！不好！]]></content>
  </entry>
</search>
